{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.5.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\n\nimport axios from 'axios';\nimport 'source-map-support/register';\nimport { dwdWarncellIdLong } from './lib/def/dwdWarncellIdLong';\nimport { DIV, ProviderController } from './lib/provider.js';\nimport { Library } from './lib/library.js';\nimport {\n    customFormatedTokens,\n    customFormatedTokensJson,\n    genericWarntyp,\n    genericWarntypeType,\n    textLevels,\n} from './lib/def/messages-def';\nimport { messageFilterTypeWithFilter, providerServices, providerServicesArray } from './lib/def/provider-def';\nimport {\n    notificationServiceArray,\n    notificationServiceOptionsType,\n    notificationTemplateType,\n} from './lib/def/notificationService-def';\nimport { notificationServiceDefaults } from './lib/def/notificationConfig-d';\naxios.defaults.timeout = 8000;\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass WeatherWarnings extends utils.Adapter {\n    library: Library;\n    providerController: ProviderController | null = null;\n    numOfRawWarnings: number = 5;\n    adminTimeoutRef: any = null;\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'weather-warnings',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.library = new Library(this);\n        this.providerController = new ProviderController(this);\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        if (this.providerController) {\n            this.providerController.init();\n            this.log.info(`Refresh Interval: ${this.providerController.refreshTime / 60000} minutes`);\n        } else {\n            throw new Error('Provider controller doesnt exists.');\n        }\n\n        setTimeout(\n            async function (that: any) {\n                const self = that as WeatherWarnings;\n                if (!self.providerController) return;\n                if (!self) return;\n                await self.library.init();\n                const notificationServiceOpt: notificationServiceOptionsType = {};\n                for (const a in notificationServiceArray) {\n                    const notificationService = notificationServiceArray[a] as keyof notificationServiceOptionsType;\n                    if (notificationService === undefined) continue;\n                    if (self.config[(notificationService + '_Enabled') as keyof ioBroker.AdapterConfig]) {\n                        const service: providerServices[] = [];\n                        if (self.config[(notificationService + '_DwdEnabled') as keyof ioBroker.AdapterConfig])\n                            service.push('dwdService');\n                        if (self.config[(notificationService + '_UwzEnabled') as keyof ioBroker.AdapterConfig])\n                            service.push('uwzService');\n                        if (self.config[(notificationService + '_UwzEnabled') as keyof ioBroker.AdapterConfig])\n                            service.push('zamgService');\n                        const template: notificationTemplateType = {\n                            new: self.config[\n                                (notificationService + '_MessageNew') as keyof ioBroker.AdapterConfig\n                            ] as string,\n                            remove: self.config[\n                                (notificationService + '_MessageRemove') as keyof ioBroker.AdapterConfig\n                            ] as string,\n                            removeAll: self.config[\n                                (notificationService + '_MessageAllRemove') as keyof ioBroker.AdapterConfig\n                            ] as string,\n                            all: '',\n                        };\n                        template.new = template.new ? template.new : 'none';\n                        template.remove = template.remove ? template.remove : 'none';\n                        template.removeAll = template.removeAll ? template.removeAll : 'none';\n                        template.all = template.all ? template.all : 'none';\n                        //@ts-expect-error verstehe ich nicht\n                        notificationServiceOpt[notificationService] = {\n                            ...notificationServiceDefaults[notificationService],\n                            service: service,\n                            filter: {\n                                level: self.config[\n                                    (notificationService + '_LevelFilter') as keyof ioBroker.AdapterConfig\n                                ] as number,\n                                type: (\n                                    self.config[\n                                        (notificationService + '_TypeFilter') as keyof ioBroker.AdapterConfig\n                                    ] as string[]\n                                ).map((a) => String(a)),\n                            },\n                            adapter: self.config[\n                                (notificationService + '_Adapter') as keyof ioBroker.AdapterConfig\n                            ] as string,\n                            name: notificationService,\n                            template: template,\n                            useadapter: true,\n                        };\n                        Object.assign(\n                            //@ts-expect-error verstehe ich nicht\n                            notificationServiceOpt[notificationService],\n                            notificationServiceDefaults[notificationService],\n                        );\n                    }\n                }\n                // hold this for some specialcases\n                if (self.config.telegram_Enabled) {\n                }\n                if (self.config.whatsapp_Enabled) {\n                }\n                if (self.config.pushover_Enabled) {\n                }\n                if (self.config.json_Enabled) {\n                }\n                if (self.config.history_Enabled) {\n                }\n                if (self.config.email_Enabled) {\n                }\n\n                self.providerController.createNotificationService(notificationServiceOpt);\n                try {\n                    const states = await self.getStatesAsync('*');\n                    self.library.initStates(states);\n                } catch (error) {\n                    self.log.error(`catch (1): init error while reading states! ${error}`);\n                }\n\n                // dwdSelectID gegen Abfrage pr\u00FCfen und erst dann als valide erkl\u00E4ren.\n                for (const a in self.config.dwdwarncellTable) {\n                    const id = self.config.dwdwarncellTable[a];\n                    if (self.config.dwdEnabled) {\n                        if (id.dwdSelectId < 10000 && isNaN(id.dwdSelectId)) {\n                            self.log.warn(`DWD is activated, but no valid warning cell is configured.`);\n                            continue;\n                        }\n                        const options: messageFilterTypeWithFilter & {\n                            [key: string]: any;\n                        } = {\n                            filter: {\n                                type: self.config.dwdTypeFilter,\n                                level: self.config.dwdLevelFilter,\n                            },\n                        };\n                        self.log.info('DWD activated. Retrieve data.');\n                        self.providerController.createProviderIfNotExist({\n                            ...options,\n                            service: 'dwdService',\n                            customName: id.dwdCityname,\n                            warncellId: String(id.dwdSelectId),\n                            providerController: self.providerController,\n                            language: self.config.dwdLanguage,\n                        });\n                    } else {\n                        self.log.warn(`dont create dwd provider ${JSON.stringify(self.config.dwdwarncellTable)}`);\n                    }\n                }\n                if (\n                    self.config.zamgEnabled &&\n                    self.config.zamgSelectID &&\n                    typeof self.config.zamgSelectID == 'string'\n                ) {\n                    self.log.info('ZAMG activated. Retrieve data.');\n                    const options: messageFilterTypeWithFilter & {\n                        [key: string]: any;\n                    } = {\n                        filter: { type: self.config.zamgTypeFilter },\n                    };\n                    const zamgArr = self.config.zamgSelectID.split(DIV) as [string, string];\n                    if (zamgArr.length == 2) {\n                        self.providerController.createProviderIfNotExist({\n                            ...options,\n                            service: 'zamgService',\n                            warncellId: zamgArr,\n                            language: self.config.zamgLanguage,\n                            providerController: self.providerController,\n                            customName: '',\n                        });\n                    }\n                }\n                if (self.config.uwzEnabled && !!self.config.uwzSelectID) {\n                    const options: messageFilterTypeWithFilter = {\n                        filter: { type: self.config.uwzTypeFilter },\n                    };\n                    self.log.info('UWZ activated. Retrieve data.');\n                    self.providerController.createProviderIfNotExist({\n                        ...options,\n                        service: 'uwzService',\n                        warncellId: 'UWZ' + self.config.uwzSelectID.toUpperCase(), //UWZ + Land + PLZ\n                        providerController: self.providerController,\n                        language: self.config.uwzLanguage,\n                        customName: '',\n                    });\n                }\n\n                self.providerController.updateEndless(self.providerController);\n                self.providerController.updateAlertEndless(self.providerController);\n            },\n            4000,\n            this,\n        );\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private onUnload(callback: () => void): void {\n        try {\n            if (this.providerController) this.providerController.delete();\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    /**\n     *  We need this later, dont remove\n     */\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    // \tif (obj) {\n    // \t\t// The object was changed\n    // \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    // \t} else {\n    // \t\t// The object was deleted\n    // \t\tthis.log.info(`object ${id} deleted`);\n    // \t}\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (!state) return;\n        if (state.ack) return;\n    }\n\n    /**\n     * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n     * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n     */\n    private async onMessage(obj: ioBroker.Message): Promise<void> {\n        if (typeof obj === 'object' && obj.message) {\n            this.log.debug(`Retrieve ${obj.command} from ${obj.from} message: ${JSON.stringify(obj)}`);\n            let connected = true;\n            let state;\n            switch (String(obj.command)) {\n                case 'Messages':\n                    {\n                        if (obj.message.service) {\n                            const templates = this.config.templateTable;\n                            const reply = [\n                                {\n                                    label: `none`,\n                                    value: `none`,\n                                },\n                            ];\n                            for (const a in templates) {\n                                const t = templates[a];\n                                if (t.templateKey !== '') {\n                                    reply.push({\n                                        label: `${t.templateKey}`,\n                                        value: `${t.templateKey}`,\n                                    });\n                                }\n                            }\n                            this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                            this.sendTo(obj.from, obj.command, reply, obj.callback);\n                        } else {\n                            this.sendTo(obj.from, obj.command, [], obj.callback);\n                            this.log.warn(\n                                `warn(44): Retrieve message with ${obj.command}, but without obj.message.service`,\n                            );\n                        }\n                    }\n\n                    break;\n                case 'notificationService':\n                    {\n                        if (obj.message && obj.message.service) {\n                            const temp: { [key: number]: boolean } = {};\n                            try {\n                                const objs = await this.getObjectViewAsync('system', 'instance', {\n                                    startkey: `system.adapter.${obj.message.service}.`,\n                                    endkey: `system.adapter.${obj.message.service}.\\u9999`,\n                                });\n\n                                if (objs && objs.rows) {\n                                    for (const a in objs.rows) {\n                                        const instance = Number(objs.rows[a].id.split('.')[3]);\n                                        if (instance !== undefined) {\n                                            temp[instance] = true;\n                                        }\n                                    }\n                                }\n                            } catch (error) {\n                                this.log.error(`error(44): ${error}`);\n                            }\n\n                            const reply = [{ label: 'none', value: 'none' }];\n\n                            for (const t in temp) {\n                                reply.push({\n                                    label: `${obj.message.service}.${t}`,\n                                    value: `${obj.message.service}.${t}`,\n                                });\n                            }\n                            this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                            this.sendTo(obj.from, obj.command, reply, obj.callback);\n                        }\n                    }\n                    break;\n                case 'templateHelp':\n                    if (obj.callback) {\n                        let reply = 'Tokens: ';\n\n                        for (const a in customFormatedTokensJson) {\n                            reply +=\n                                '${' +\n                                a +\n                                '}: ' +\n                                ((await this.library.getTranslation(\n                                    customFormatedTokensJson[a as keyof customFormatedTokens],\n                                )) +\n                                    ' - / - ');\n                        }\n                        reply = reply.slice(0, -7);\n                        //this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                        this.sendTo(obj.from, obj.command, reply, obj.callback);\n                    }\n                    break;\n                case 'filterLevel':\n                    if (obj.callback) {\n                        const reply = [];\n                        const text = textLevels.textGeneric;\n                        for (const a in text) {\n                            if (Number(a) == 5) break;\n                            reply.push({\n                                label: await this.library.getTranslation(\n                                    textLevels.textGeneric[a as keyof typeof text],\n                                ),\n                                value: Number(a),\n                            });\n                        }\n                        this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                        this.sendTo(obj.from, obj.command, reply, obj.callback);\n                    }\n                    break;\n                case 'filterType':\n                    if (obj.callback) {\n                        const reply = [];\n                        if (\n                            obj.message &&\n                            obj.message.service &&\n                            providerServicesArray.indexOf(obj.message.service) != -1\n                        ) {\n                            const service = obj.message.service as 'dwdService' | 'uwzService' | 'zamgService';\n                            for (const b in genericWarntyp) {\n                                const a = Number(b) as keyof genericWarntypeType;\n                                if (genericWarntyp[a][service] !== undefined && genericWarntyp[a][service].length > 0) {\n                                    reply.push({\n                                        label: await this.library.getTranslation(genericWarntyp[a].name),\n                                        value: a,\n                                    });\n                                }\n                            }\n                        } else if (\n                            obj.message &&\n                            obj.message.service &&\n                            notificationServiceArray.indexOf(obj.message.service) != -1\n                        ) {\n                            for (const b in genericWarntyp) {\n                                const a = Number(b) as keyof genericWarntypeType;\n                                reply.push({\n                                    label: await this.library.getTranslation(genericWarntyp[a].name),\n                                    value: a,\n                                });\n                            }\n                        }\n                        this.log.debug(obj.command + ': ' + JSON.stringify(reply));\n                        this.sendTo(obj.from, obj.command, reply, obj.callback);\n                    }\n                    break;\n                case 'dwd.name':\n                case 'dwd.check':\n                case 'dwd.name.text':\n                    {\n                        //debounce\n                        if (this.adminTimeoutRef) {\n                            this.clearTimeout(this.adminTimeoutRef);\n                            this.adminTimeoutRef = this.setTimeout(this.dwdWarncellIdLongHelper, 2000, {\n                                obj: obj,\n                                that: this,\n                            });\n                        } else {\n                            this.dwdWarncellIdLongHelper({\n                                obj: obj,\n                                that: this,\n                            });\n                            this.adminTimeoutRef = this.setTimeout(\n                                (that: any) => (that.adminTimeoutRef = null),\n                                2000,\n                                this,\n                            );\n                        }\n                    }\n                    break;\n                case 'test':\n                    this.log.debug(`Retrieve test message!`);\n                    this.sendTo(obj.from, 'test', 'Test Message', obj.callback);\n                    break;\n                /**testing online */\n                case 'test-connection':\n                    if (obj.from !== 'system.adapter.test.0') {\n                        this.sendTo(obj.from, obj.command, 'Dont use this command!', obj.callback);\n                        return;\n                    }\n                    this.log.debug(`Retrieve test-connection message!`);\n                    connected = true;\n                    [\n                        'provider.dwd.info.connection',\n                        'provider.uwz.info.connection',\n                        'provider.zamg.info.connection',\n                        'info.connection',\n                    ].forEach((a) => {\n                        state = this.library.getdb(a);\n                        if (state) connected = connected && !!state.val;\n                    });\n                    // connected === true is right\n                    this.sendTo(obj.from, obj.command, connected ? 'true' : 'false', obj.callback);\n                    break;\n                /** testing with testdata and switch then to online */\n                case 'test-data':\n                    if (obj.from !== 'system.adapter.test.0') {\n                        this.sendTo(obj.from, obj.command, 'Dont use this command!', obj.callback);\n                        return;\n                    }\n                    connected = false;\n                    [\n                        'provider.dwd.info.connection',\n                        'provider.uwz.info.connection',\n                        'provider.zamg.info.connection',\n                        'info.connection',\n                    ].forEach((a) => {\n                        state = this.library.getdb(a);\n                        if (state) connected = connected || !!state.val;\n                    });\n                    state = this.library.getdb('provider.activeWarnings');\n                    if (state) connected = !!connected || !(state.val && Number(state.val) >= 4);\n                    else connected = true; //error\n                    // connected === false is right\n                    this.sendTo(\n                        obj.from,\n                        obj.command,\n                        !connected\n                            ? 'ok'\n                            : `connect: ${connected} (false) activeWarnings ${state ? state.val : 'undefined'} (>=4)`,\n                        obj.callback,\n                    );\n                    this.config.useTestWarnings = false;\n                    break;\n                default:\n                    this.sendTo(obj.from, obj.command, 'unknown message', obj.callback);\n                    this.log.debug(\n                        `Retrieve unknown command ${obj.command} messsage: ${JSON.stringify(obj.message)} from ${\n                            obj.from\n                        }`,\n                    );\n            }\n        }\n    }\n    dwdWarncellIdLongHelper(obj1: any): void {\n        const obj = obj1.obj as ioBroker.Message;\n        const that = obj1.that as WeatherWarnings;\n        if (obj.callback) {\n            const data = dwdWarncellIdLong;\n            //if (!data) data = await axios.get(that.config.dwdWarncellTextUrl);\n            const text: any[] = [];\n            if (text.length == 0) {\n                const dataArray: string[] = data.split('\\n');\n\n                dataArray.splice(0, 1);\n                dataArray.forEach((element) => {\n                    const value = element.split(';')[0];\n                    const cityText = element.split(';')[1];\n                    //const cityText = element.split(';')[2];\n                    if (\n                        value &&\n                        (value.startsWith('10') ||\n                            value.startsWith('9') ||\n                            value.startsWith('8') ||\n                            value.startsWith('7'))\n                    ) {\n                        //if (text) text.push(`${cityText} #${value}`);\n                        if (text) text.push({ label: cityText, value: value.trim() });\n                    }\n                });\n                text.sort((a, b) => {\n                    const nameA = a.label.toUpperCase(); // ignore upper and lowercase\n                    const nameB = b.label.toUpperCase(); // ignore upper and lowercase\n                    if (nameA < nameB) {\n                        return -1;\n                    }\n                    if (nameA > nameB) {\n                        return 1;\n                    }\n\n                    return 0;\n                });\n            }\n            const msg = obj.message;\n            if (msg.dwd.length > 2) {\n                const result = text.filter(\n                    (a) =>\n                        (a.label && a.label.toUpperCase().includes(msg.dwd.toUpperCase())) ||\n                        (!isNaN(msg.dwd) && Number(a.value) == Number(msg.dwd)),\n                );\n                //if (result.length == 1) that.config.dwdSelectId = result[0].value;\n\n                if (obj.command == 'dwd.name') that.sendTo(obj.from, obj.command, result, obj.callback);\n                else if (obj.command == 'dwd.name.text' || obj.command == 'dwd.check')\n                    that.sendTo(obj.from, obj.command, result.length == 1 ? result[0].label : '', obj.callback);\n                //that.log.debug(`ID is is: ${that.config.dwdSelectId}`);\n            } else {\n                if (obj.command == 'dwd.name.text' || obj.command == 'dwd.check')\n                    that.sendTo(obj.from, obj.command, '', obj.callback);\n                else that.sendTo(obj.from, obj.command, text, obj.callback);\n            }\n            that.adminTimeoutRef = null;\n        }\n    }\n}\nif (require.main !== module) {\n    // Export the constructor in compact mode\n\n    module.exports = (options: WeatherWarnings | undefined) =>\n        //@ts-expect-error no idea why options need log\n        new WeatherWarnings(options);\n} else {\n    // otherwise start the instance directly\n    (() => new WeatherWarnings())();\n}\nexport = WeatherWarnings;\n"],
  "mappings": "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",
  "names": ["axios", "a"]
}
