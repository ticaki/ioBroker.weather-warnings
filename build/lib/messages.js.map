{
  "version": 3,
  "sources": ["../../src/lib/messages.ts"],
  "sourcesContent": ["import WeatherWarnings from '../main';\nimport { genericStateObjects, statesObjectsWarnings } from './def/definitionen';\nimport {\n    textLevels,\n    warnTypeName,\n    dwdLevel,\n    level,\n    color,\n    customFormatedKeysDef,\n    genericWarntyp,\n    genericWarntypeType,\n    notificationMessageType,\n    genericWarntypeNumberType,\n} from './def/messages-def';\nimport {\n    notificationServiceBaseType,\n    notificationServiceConfigType,\n    notificationServiceType,\n    notificationTemplateUnionType,\n    serciceCapabilities,\n} from './def/notificationService-def';\nimport { messageFilterType } from './def/provider-def';\nimport { BaseClass, Library } from './library';\nimport { ProvideClassType, ProviderController } from './provider';\n\ntype ChangeTypeOfKeys<Obj, newKey> = Obj extends object\n    ? { [K in keyof Obj]: ChangeTypeOfKeys<Obj[K], newKey> }\n    : newKey;\n\nexport type customformatedKJDef = ChangeTypeOfKeys<customFormatedKeysDef, customFormatedKDefSub>;\nexport type customFormatedKInit = ChangeTypeOfKeys<customFormatedKeysDef, string | number | undefined> | undefined;\nexport type customFormatedKR = ChangeTypeOfKeys<customFormatedKeysDef, string | number | undefined>;\n\ntype customFormatedKDefSub = { cmd?: messageCmdType; node: string };\ntype messageCmdType = 'dayoftheweek' | 'translate' | 'dayoftheweekshort';\n/**\n * bla\n */\nexport class MessagesClass extends BaseClass {\n    provider: ProvideClassType | null;\n    providerController: ProviderController;\n    library: Library;\n    formatedKeysJsonataDefinition: customformatedKJDef = {};\n    formatedData: customFormatedKInit;\n    rawWarning: any;\n    /** message is a new message */\n    newMessage: boolean = true;\n    /** message got a update lately */\n    updated: boolean = false;\n    /**Indicate if message is marked for remove. */\n    notDeleted: boolean = true;\n    templates: ioBroker.AdapterConfig['templateTable'];\n    messages: { message: string; key: string }[] = [];\n    starttime = 1;\n    endtime = 1;\n    ceiling = 0;\n    altitude = 0;\n    level = 0;\n    type = 0;\n    genericType: keyof genericWarntypeType = 1;\n    /** jsonata/typscript cmd to gather data from warning json */\n    formatedKeyCommand: { [key: string]: Required<customformatedKJDef> } = {\n        dwdService: {\n            starttime: {\n                node: `$fromMillis($toMillis(ONSET),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis($toMillis(ONSET),\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis($toMillis(EXPIRES),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis($toMillis(EXPIRES),\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `ONSET`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `EXPIRES`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `HEADLINE` },\n            description: { node: `DESCRIPTION` },\n            weathertext: { node: `` },\n            ceiling: { node: `$floor(CEILING * 0.3048)` },\n            altitude: { node: `$floor(ALTITUDE * 0.3048)` },\n            warnlevelcolorhex: {\n                node: `($temp := $lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY));$lookup(${JSON.stringify(\n                    color.generic,\n                )},$string($temp)))`,\n            },\n            warnlevelcolorname: {\n                node: `($temp := $lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY));$lookup(${JSON.stringify(\n                    color.textGeneric,\n                )},$string($temp)))`,\n                cmd: 'translate',\n            },\n            warnlevelname: {\n                node: `($temp := $lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY));$lookup(${JSON.stringify(\n                    textLevels.textGeneric,\n                )},$string($temp)))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `$lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY))`,\n            },\n\n            warntypename: {\n                node: `$lookup(${JSON.stringify(warnTypeName.dwdService)}, $string(EC_II))`,\n                cmd: 'translate',\n            },\n            location: { node: `AREADESC` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            instruction: {\n                cmd: undefined,\n                node: 'INSTRUCTION',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `ONSET`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `EXPIRES`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n\n        uwzService: {\n            starttime: {\n                node: `$fromMillis(dtgStart,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis(dtgStart,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis(dtgEnd,\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis(dtgEnd,\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `dtgStart`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `dtgEnd`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `payload.translationsShortText` },\n            description: { node: `payload.translationsLongText` },\n            weathertext: { node: `` },\n            ceiling: { node: `payload.altMax` },\n            altitude: { node: `payload.altMin` },\n            warnlevelcolorname: {\n                node: `($i := $split(payload.levelName, '_'); $l := $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    level.uwz,\n                )}, $i[2]); $lookup(${JSON.stringify(color.textGeneric)},$string($l)))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    level.uwz,\n                )}, $i[2]))`,\n            },\n            warnlevelcolorhex: {\n                node: `$lookup(${JSON.stringify(\n                    color.generic,\n                )},$string(($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    level.uwz,\n                )}, $i[2]))))`,\n            },\n            warnlevelname: {\n                node: `($i := $split(payload.levelName, '_'); $l := $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                    level.uwz,\n                )}, $i[2]); $lookup(${JSON.stringify(textLevels.textGeneric)},$string($l)))`,\n                cmd: 'translate',\n            },\n            warntypename: {\n                node: `$lookup(${JSON.stringify(warnTypeName.uwzService)}, $string(type))`,\n                cmd: 'translate',\n            },\n            location: { node: `areaID` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            instruction: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `dtgStart`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `dtgEnd`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n        zamgService: {\n            starttime: {\n                node: `$fromMillis($number(rawinfo.start),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdate: {\n                node: `$fromMillis($number(rawinfo.start),\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            endtime: {\n                node: `$fromMillis($number(rawinfo.end),\"[H#1]:[m01]\",\"\\${this.timeOffset}\")`,\n            },\n            enddate: {\n                node: `$fromMillis($number(rawinfo.end),\"[D01].[M01]\",\"\\${this.timeOffset}\")`,\n            },\n            startdayofweek: {\n                node: `$number(rawinfo.start)`,\n                cmd: 'dayoftheweek',\n            },\n            enddayofweek: {\n                node: `$number(rawinfo.end)`,\n                cmd: 'dayoftheweek',\n            },\n            headline: { node: `text` },\n            description: { node: `auswirkungen` },\n            weathertext: { node: `meteotext` },\n            ceiling: { node: `` },\n            altitude: { node: `` },\n            warnlevelcolorname: {\n                node: `$lookup(${JSON.stringify(color.textGeneric)},$string(rawinfo.wlevel))`,\n                cmd: 'translate',\n            },\n            warnlevelnumber: {\n                node: `$string(rawinfo.wlevel)`,\n            },\n            warnlevelcolorhex: {\n                node: `$lookup(${JSON.stringify(color.zamgColor)},$string(rawinfo.wlevel))`,\n            },\n            warnlevelname: {\n                node: `$lookup(${JSON.stringify(textLevels.textGeneric)},$string(rawinfo.wlevel))`,\n                cmd: 'translate',\n            },\n            warntypename: {\n                node: `$lookup(${JSON.stringify(warnTypeName.zamgService)},$string(rawinfo.wtype))`,\n                cmd: 'translate',\n            },\n\n            location: { node: `location` },\n            instruction: { node: `empfehlungen` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                node: `$number(rawinfo.start)`,\n                cmd: 'dayoftheweekshort',\n            },\n            enddayofweekshort: {\n                node: `$number(rawinfo.end)`,\n                cmd: 'dayoftheweekshort',\n            },\n            countdown: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n        default: {\n            starttime: { node: `` },\n            startdate: { node: `` },\n            endtime: { node: `` },\n            enddate: { node: `` },\n            startdayofweek: { node: `` },\n            enddayofweek: { node: `` },\n            headline: { node: `` },\n            description: { node: `` },\n            weathertext: { node: `` },\n            ceiling: { node: `` },\n            altitude: { node: `` },\n            warnlevelname: { node: `` },\n            warnlevelnumber: { node: `` },\n            warnlevelcolorhex: { node: `` },\n            warnlevelcolorname: { node: `` },\n            warntypename: { node: `` },\n            location: { node: `` },\n            instruction: { node: `` },\n            warntypegenericname: {\n                cmd: undefined,\n                node: '',\n            },\n            provider: {\n                cmd: undefined,\n                node: '',\n            },\n            locationcustom: {\n                cmd: undefined,\n                node: '',\n            },\n            startdayofweekshort: {\n                cmd: undefined,\n                node: '',\n            },\n            enddayofweekshort: {\n                cmd: undefined,\n                node: '',\n            },\n            countdown: {\n                cmd: undefined,\n                node: '',\n            },\n        },\n    };\n    constructor(\n        adapter: WeatherWarnings,\n        name: string,\n        provider: ProvideClassType | null,\n        data: object,\n        pcontroller: ProviderController,\n    ) {\n        super(adapter, name);\n\n        if (!data && provider) {\n            throw new Error(`${this.log.getName()} data is null`);\n        }\n\n        this.provider = provider;\n        this.library = this.adapter.library;\n        this.rawWarning = data;\n        this.templates = this.adapter.config.templateTable;\n        this.providerController = pcontroller;\n        switch (provider ? provider.service : 'default') {\n            case `dwdService`:\n            case `uwzService`:\n            case `zamgService`:\n                if (provider && provider.service) {\n                    const json = this.formatedKeyCommand[provider.service];\n                    for (const k in json) {\n                        const key = k as keyof customFormatedKeysDef;\n                        const data = this.formatedKeyCommand[provider.service][key];\n                        this.addFormatedDefinition(key, data);\n                    }\n                }\n                break;\n            default:\n                this.formatedKeysJsonataDefinition = {\n                    starttime: { node: `` },\n                    startdate: { node: `` },\n                    endtime: { node: `` },\n                    enddate: { node: `` },\n                    startdayofweek: { node: `` },\n                    enddayofweek: { node: `` },\n                    headline: { node: `` },\n                    description: { node: `` },\n                    weathertext: { node: `` },\n                    ceiling: { node: `` }, // max h\u00F6he\n                    altitude: { node: `` }, // min h\u00F6he\n                    warnlevelname: { node: `` },\n                    warnlevelnumber: { node: `` },\n                    warnlevelcolorhex: { node: `` },\n                    warnlevelcolorname: { node: `` },\n                    warntypename: { node: `` },\n                    location: { node: `` },\n                };\n        }\n    }\n    async init(): Promise<customFormatedKR> {\n        switch (this.provider ? this.provider.service : 'default') {\n            case 'dwdService':\n                {\n                    this.starttime = Number(await this.library.readWithJsonata(this.rawWarning, `$toMillis(ONSET)`));\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$toMillis(EXPIRES)`));\n                    this.ceiling = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$floor(CEILING * 0.3048)`),\n                    ); // max h\u00F6he\n                    this.altitude = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$floor(ALTITUDE * 0.3048)`),\n                    ); // min h\u00F6he\n                    this.level = Number(\n                        await this.library.readWithJsonata(\n                            this.rawWarning,\n                            `$number($lookup(${JSON.stringify(dwdLevel)},$lowercase(SEVERITY)))`,\n                        ),\n                    );\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `$number(EC_II)`));\n                }\n                break;\n\n            case 'uwzService':\n                {\n                    this.starttime = Number(await this.library.readWithJsonata(this.rawWarning, `$number(dtgStart)`));\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$number(dtgEnd)`));\n                    this.ceiling = Number(await this.library.readWithJsonata(this.rawWarning, `payload.altMax`)); // max h\u00F6he\n                    this.altitude = Number(await this.library.readWithJsonata(this.rawWarning, `payload.altMin`)); // min h\u00F6he\n                    this.level = Number(\n                        await this.library.readWithJsonata(\n                            this.rawWarning,\n                            `($i := $split(payload.levelName, '_'); $i[0] = \"notice\" ? 1 : $i[1] = \"forewarn\" ? 1 : $lookup(${JSON.stringify(\n                                level.uwz,\n                            )}, $i[2]))`,\n                        ),\n                    );\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `$number(type)`));\n                }\n                break;\n            case 'zamgService':\n                {\n                    this.starttime = Number(\n                        await this.library.readWithJsonata(this.rawWarning, `$number(rawinfo.start)`),\n                    );\n                    this.endtime = Number(await this.library.readWithJsonata(this.rawWarning, `$number(rawinfo.end)`));\n                    this.ceiling = -1;\n                    this.altitude = -1;\n                    this.level = Number(await this.library.readWithJsonata(this.rawWarning, `rawinfo.wlevel`));\n                    this.type = Number(await this.library.readWithJsonata(this.rawWarning, `rawinfo.wtype`));\n                }\n                break;\n            default: {\n                this.starttime = 1;\n                this.endtime = 1;\n                this.ceiling = -1;\n                this.altitude = -1;\n                this.level = -1;\n                this.type = 0;\n            }\n        }\n\n        const sortedWarntypes: Required<genericWarntypeNumberType>[] = [10, 7, 2, 4, 3, 8, 9, 5, 6, 11, 12, 1];\n        if (this.provider) {\n            for (const t in sortedWarntypes) {\n                const o = genericWarntyp[sortedWarntypes[t]];\n                const s = this.provider.service;\n                //@ts-expect-error keine ahnung o und s sind definiert\n                if (Array.isArray(o[s]) && o[s].indexOf(this.type) != -1) {\n                    this.genericType = sortedWarntypes[t];\n                    break;\n                }\n            }\n        }\n\n        return await this.updateFormatedData(true);\n    }\n    filter(filter: messageFilterType): boolean {\n        this.type;\n        let hit = false;\n        if (filter.level && filter.level > this.level) return false;\n        for (const f in filter.type) {\n            if (\n                //@ts-expect-error dann ebenso\n                genericWarntyp[filter.type[f]][this.provider.service].indexOf(this.type) != -1\n            ) {\n                hit = true;\n                break;\n            }\n        }\n        if (hit) return false;\n        return true;\n    }\n    async formatMessages(): Promise<void> {\n        const templates = this.adapter.config.templateTable;\n        const messages: { message: string; key: string }[] = [];\n        if (this.formatedData) {\n            for (const a in templates) {\n                const template = templates[a].template;\n                if (!template) continue;\n                const temp = template.split(/(?<!\\\\)\\${/g);\n                let msg: string = temp[0];\n                for (let b = 1; temp.length > b; b++) {\n                    const token = temp[b];\n                    const t = token.split(/(?<!\\\\)}/g);\n                    const key = t[0] as keyof customFormatedKeysDef;\n                    if (key && this.formatedData[key] !== undefined) msg += this.formatedData[key];\n                    else if (key && this.formatedData[key.toLowerCase() as keyof customFormatedKeysDef] !== undefined) {\n                        let m = this.formatedData[key.toLowerCase() as keyof customFormatedKeysDef];\n                        if (typeof m == 'string' && m.length > 0) {\n                            m =\n                                m[0].toUpperCase() +\n                                (key[key.length - 1] == key[key.length - 1].toUpperCase()\n                                    ? m.slice(1).toUpperCase()\n                                    : m.slice(1));\n                        }\n                        msg += m;\n                    } else msg += key;\n                    if (t.length > 1) msg += t[1];\n                }\n                msg = msg.replace('\\\\', '');\n                messages.push({ key: templates[a].templateKey, message: msg });\n            }\n        } else {\n            templates.forEach((a) => messages.push({ key: a.templateKey, message: a.template }));\n        }\n        this.messages = messages;\n    }\n\n    async updateFormatedData(update: boolean = false): Promise<customFormatedKR> {\n        if (!this.rawWarning && !this.formatedData) {\n            throw new Error(`${this.log.getName()} error(165) rawWarning and formatedDate empty!`);\n        }\n\n        if (!this.formatedData || this.updated || update) {\n            const timeOffset =\n                (Math.floor(new Date().getTimezoneOffset() / 60) < 0 || new Date().getTimezoneOffset() % 60 < 0\n                    ? '+'\n                    : '-') +\n                ('00' + Math.abs(Math.floor(new Date().getTimezoneOffset() / 60))).slice(-2) +\n                ('00' + Math.abs(new Date().getTimezoneOffset() % 60)).slice(-2);\n            const temp: any = {};\n            for (const key in this.formatedKeysJsonataDefinition) {\n                const obj = this.formatedKeysJsonataDefinition[key as keyof customFormatedKeysDef];\n                if (obj !== undefined && obj.node !== undefined) {\n                    // reset the offset because of daylight saving time\n                    const cmd = obj.node.replace(`\\${this.timeOffset}`, timeOffset);\n\n                    let result =\n                        cmd != ''\n                            ? ((await this.library.readWithJsonata(\n                                  this.rawWarning,\n                                  cmd,\n                              )) as keyof customFormatedKeysDef)\n                            : '';\n                    if (obj.cmd !== undefined)\n                        result = (await this.readWithTypescript(result, obj.cmd)) as keyof customFormatedKeysDef;\n                    // Handling for uwzService translations in jsons with different Names - but onl 1 Key here.\n                    if (typeof result == 'object') {\n                        for (const a in result as object) {\n                            if (temp[key]) temp[key] += ', ';\n                            else temp[key] = '';\n                            temp[key] += result[a];\n                        }\n                    } else temp[key] = result;\n                }\n            }\n            this.formatedData = temp as customFormatedKeysDef;\n            this.formatedData.warntypegenericname = await this.library.getTranslation(\n                genericWarntyp[this.genericType].name,\n            );\n            this.formatedData.locationcustom = this.provider ? this.provider.customName : '';\n            this.formatedData.provider = this.provider\n                ? this.provider.service.replace('Service', '').toUpperCase()\n                : 'unknown';\n            this.updated = false;\n        }\n        if (!this.formatedData) {\n            throw new Error(`${this.log.getName()} formatedDate is empty!`);\n        }\n        return this.formatedData;\n    }\n\n    async readWithTypescript(data: any, cmd: messageCmdType): Promise<string | number> {\n        if (!this.rawWarning && !cmd) {\n            throw new Error('readWithTypescript called without rawWarning or val!');\n        }\n        switch (cmd) {\n            case 'dayoftheweek': {\n                return new Date(data as string | number | Date).toLocaleDateString(this.library.getLocalLanguage(), {\n                    weekday: 'long',\n                });\n            }\n            case 'dayoftheweekshort': {\n                return new Date(data as string | number | Date).toLocaleDateString(this.library.getLocalLanguage(), {\n                    weekday: 'short',\n                });\n            }\n            case 'translate': {\n                return this.library.getTranslation(data);\n            }\n        }\n        return '';\n    }\n\n    //** Update rawWanrings and dont delete message */\n    updateData(data: object): void {\n        this.rawWarning = data;\n        this.notDeleted = true;\n    }\n\n    //** dont send a message and dont delete this*/\n    silentUpdate(): void {\n        this.newMessage = false;\n        this.notDeleted = true;\n    }\n    async sendMessage(\n        action: notificationTemplateUnionType,\n        activeWarnings: boolean,\n        override = false,\n    ): Promise<boolean> {\n        if (this.messages.length == 0) return false;\n        if (\n            !((this.newMessage && action == 'new') || (!this.notDeleted && action == 'remove') || action == 'removeAll')\n        ) {\n            if (!override) action = 'all';\n        }\n        if (this.formatedData) {\n            const negativ = this.starttime - Date.now() < 0;\n            const remain = new Date(Math.abs(this.starttime - Date.now()));\n            const d = remain.getDate() - 1;\n            const h = d > 0 ? ('00' + String(remain.getHours())).slice(2) : String(remain.getHours());\n            this.formatedData.countdown = `${negativ ? '-' : ''}${d > 0 ? `${String(d)}:` : ''}${h}:${String(\n                remain.getMinutes(),\n            )}`;\n        }\n        const msgsend: { [key: string]: string } = {};\n        for (let a = 0; a < this.messages.length; a++) {\n            const msg = this.messages[a];\n            if (this.provider)\n                this.library.writedp(\n                    `${this.provider.name}.messages.${msg.key}`,\n                    msg.message,\n                    genericStateObjects.messageStates.message,\n                );\n            msgsend[msg.key] = msg.message;\n        }\n        await this.providerController.sendToNotifications(\n            { msgs: msgsend, obj: this },\n            override ? 'new' : action,\n            activeWarnings,\n        );\n\n        this.newMessage = false;\n        return false;\n    }\n\n    delete(): void {\n        this.notDeleted = false;\n        this.newMessage = false;\n        this.updated = false;\n    }\n    async writeFormatedKeys(index: number): Promise<void> {\n        if (this.notDeleted) {\n            if (this.provider)\n                this.library.writeFromJson(\n                    `${this.provider.name}.formatedKeys.${('00' + index.toString()).slice(-2)}`,\n                    `allService.formatedkeys`,\n                    statesObjectsWarnings,\n                    this.formatedData,\n                );\n        }\n    }\n    addFormatedDefinition(key: keyof customformatedKJDef, arg: customFormatedKDefSub | undefined): void {\n        if (arg === undefined) return;\n        if (!this.formatedKeysJsonataDefinition) this.formatedKeysJsonataDefinition = {};\n        this.formatedKeysJsonataDefinition[key] = arg;\n    }\n    //async init(msg: any): Promise<void> {}\n}\n\nexport class NotificationClass extends BaseClass {\n    options: notificationServiceBaseType;\n    takeThemAll = false;\n    config: notificationServiceConfigType;\n\n    clearAll(): void {}\n    async writeNotifications(): Promise<void> {}\n\n    constructor(adapter: WeatherWarnings, notifcationOptions: notificationServiceBaseType) {\n        super(adapter, notifcationOptions.name);\n        this.options = notifcationOptions;\n        this.config = serciceCapabilities[notifcationOptions.name];\n    }\n    /**\n     *  Send this message after filtering to services\n     * @param messages the message with MessageClassRef Ref can be null\n     * @param action <string>\n     * @param activeWarnings <boolean> if there are more active messages\n     * @returns\n     */\n    async sendNotifications(\n        messages: notificationMessageType,\n        action: notificationTemplateUnionType,\n        activeWarnings: boolean,\n    ): Promise<boolean> {\n        if (this.config.notifications.indexOf(action) == -1) return false;\n        if (\n            !messages.obj ||\n            !messages.obj.provider ||\n            (this.options.service.indexOf(messages.obj.provider.service) != -1 &&\n                (this.options.filter.level === undefined || this.options.filter.level <= messages.obj.level) &&\n                this.options.filter.type.indexOf(String(messages.obj.type)) == -1)\n        ) {\n            if (this.options.template[action] == 'none' || this.options.template[action] == '') return false;\n            const msg = messages.msgs[this.options.template[action]];\n            if (msg == '') return false;\n\n            switch (this.name as notificationServiceType) {\n                case 'telegram':\n                    {\n                        const opt = { text: msg, disable_notification: true };\n                        if (action !== 'remove' || activeWarnings)\n                            this.adapter.sendTo(this.options.adapter, 'send', opt, () => {\n                                this.log.debug(`Send the message: ${msg}`);\n                            });\n                    }\n                    break;\n                case 'pushover':\n                    {\n                        const opt = {\n                            message: msg,\n                            disable_notification: true,\n                        };\n                        //newMsg.title = topic;newMsg.device\n                        if (action !== 'remove' || activeWarnings)\n                            this.adapter.sendTo(this.options.adapter, 'send', opt, () => {\n                                this.log.debug(`Send the message: ${msg}`);\n                            });\n                    }\n                    break;\n                case 'whatsapp':\n                    {\n                        const service = this.options.adapter.replace('whatsapp', 'whatsapp-cmb');\n                        // obj.message.phone\n                        const opt = { text: msg };\n                        if (action !== 'remove' || activeWarnings)\n                            this.adapter.sendTo(service, 'send', opt, () => {\n                                this.log.debug(`Send the message: ${msg}`);\n                            });\n                    }\n                    break;\n                case 'history':\n                    {\n                        if (!messages.obj || !messages.obj.provider || !this.adapter.config.history_Enabled)\n                            return false;\n                        let newMsg = msg;\n                        if (this.adapter.config.history_allinOne) {\n                            newMsg = JSON.stringify(messages.obj.formatedData);\n                        }\n                        const targets = [messages.obj.provider.name, messages.obj.provider.providerController.name];\n                        for (const a in targets) {\n                            try {\n                                const dp = `${targets[a]}.history`;\n                                const state = this.adapter.library.getdb(dp);\n                                let json: object[] = [];\n                                if (state && state.val && typeof state.val == 'string' && state.val != '')\n                                    json = JSON.parse(state.val);\n                                json.unshift(JSON.parse(newMsg));\n                                json.splice(500);\n                                await this.adapter.library.writedp(\n                                    dp,\n                                    JSON.stringify(json),\n                                    genericStateObjects.history,\n                                );\n                            } catch (error) {\n                                this.log.error(\n                                    `${this.name} template has wrong formate. ${this.name} deactivated! template: ${this.options.template[action]}, message: ${msg}`,\n                                );\n                                this.adapter.config.history_Enabled = false;\n                                return false;\n                            }\n                        }\n                    }\n                    break;\n                case 'json':\n                    {\n                    }\n                    break;\n                case 'email':\n                    {\n                    }\n                    break;\n            }\n            return true;\n        }\n        return false;\n    }\n}\nexport class AllNotificationClass extends NotificationClass {\n    providerDB: {\n        [key: string]: { starttime: number; msg: string | object }[];\n    };\n    constructor(adapter: WeatherWarnings, options: notificationServiceBaseType) {\n        super(adapter, options);\n        this.providerDB = {};\n        this.takeThemAll = true;\n        this.adapter.providerController &&\n            this.adapter.providerController.provider.forEach((a) => (this.providerDB[a.name] = []));\n    }\n    clearAll(): void {\n        for (const l in this.providerDB) {\n            this.providerDB[l] = [];\n        }\n    }\n\n    async sendNotifications(\n        messages: notificationMessageType,\n        action: notificationTemplateUnionType,\n        activeWarnings: boolean,\n    ): Promise<boolean> {\n        if (await super.sendNotifications(messages, action, activeWarnings)) {\n            const msg = messages.msgs[this.options.template[action]];\n\n            switch (this.name as notificationServiceType) {\n                case 'json':\n                case 'email':\n                    {\n                        try {\n                            if (action == 'remove' && !activeWarnings) return false;\n                            const json = this.name == 'json' && this.adapter.config.json_parse ? JSON.parse(msg) : msg;\n                            if (messages.obj && messages.obj.provider) {\n                                if (\n                                    this.providerDB[messages.obj.provider.name] === undefined ||\n                                    !Array.isArray(this.providerDB[messages.obj.provider.name])\n                                ) {\n                                    this.providerDB[messages.obj.provider.name] = [];\n                                }\n                                this.log.debug(\n                                    `sendNotifications(1): from: ${messages.obj.provider.name}, message:${msg}`,\n                                );\n\n                                this.providerDB[messages.obj.provider.name].push({\n                                    starttime: messages.obj.starttime,\n                                    msg: json,\n                                });\n                            } else {\n                                if (action == 'removeAll') {\n                                    for (const p in this.providerDB) {\n                                        this.providerDB[p] = [\n                                            {\n                                                starttime: Date.now(),\n                                                msg: json,\n                                            },\n                                        ];\n                                    }\n                                }\n                                this.log.debug('sendNotifications(2): removeAll: ' + msg);\n                            }\n                        } catch (error) {\n                            this.log.error(\n                                `Json template has wrong formate. Conversion deactivated! template: ${this.options.template[action]}, message: ${msg}`,\n                            );\n                            this.adapter.config.json_parse = false;\n                            return false;\n                        }\n                    }\n                    break;\n            }\n            return true;\n        }\n        return false;\n    }\n    async writeNotifications(msg: string = ''): Promise<void> {\n        switch (this.name as notificationServiceType) {\n            case 'json':\n                {\n                    let all: { starttime: number; msg: string | object }[] = [];\n                    for (const name in this.providerDB) {\n                        all = all.concat(this.providerDB[name]);\n                        const prefix = name + '.activeWarnings_json';\n                        this.adapter.library.writedp(\n                            prefix,\n                            JSON.stringify(\n                                this.providerDB[name].length > 0 ? this.providerDB[name].map((a) => a.msg) : [msg],\n                            ),\n                            genericStateObjects.activeWarningsJson,\n                        );\n                    }\n                    all = all.filter((item, pos) => {\n                        return all.indexOf(item) == pos;\n                    });\n                    all.sort((a, b) => a.starttime - b.starttime);\n                    if (this.adapter.providerController) {\n                        this.adapter.library.writedp(\n                            this.adapter.providerController.name + '.activeWarnings_json',\n                            JSON.stringify(all.length > 0 ? all.map((a) => a.msg) : [msg]),\n                            genericStateObjects.activeWarningsJson,\n                        );\n                    }\n                }\n                break;\n            case 'email':\n                {\n                    let all: { starttime: number; msg: string | object }[] = [];\n                    for (const name in this.providerDB) {\n                        all = all.concat(this.providerDB[name]);\n                    }\n                    all.sort((a, b) => a.starttime - b.starttime);\n                    let flat: string[] = all.map((a) => a.msg as string);\n                    flat = flat.filter((a, pos) => {\n                        return flat.indexOf(a) == pos;\n                    });\n                    const message = flat.join(this.adapter.config.email_line_break);\n                    this.adapter.sendTo(this.options.adapter, 'send', message, () => {\n                        this.log.debug(`Send the message: ${msg}`);\n                    });\n                }\n                break;\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["data"]
}
