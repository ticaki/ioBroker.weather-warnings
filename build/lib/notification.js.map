{
  "version": 3,
  "sources": ["../../src/lib/notification.ts"],
  "sourcesContent": ["import WeatherWarnings from '../main';\nimport { genericStateObjects } from './def/definitionen';\nimport * as NotificationType from './def/notificationService-def';\nimport * as library from './library';\nimport * as Provider from './def/provider-def';\nimport { filterWarntype } from './def/messages-def';\n\nexport class NotificationClass extends library.BaseClass {\n    options: NotificationType.BaseType;\n    takeThemAll = false;\n    providerDB: any;\n    removeAllSend: boolean = true;\n\n    //clearAll(): void {}\n\n    constructor(adapter: WeatherWarnings, notifcationOptions: NotificationType.BaseType) {\n        super(adapter, notifcationOptions.name);\n        this.log.debug(`Create notification service ${this.name}`);\n        this.options = notifcationOptions;\n        this.options = Object.assign(this.options, NotificationType.serciceCapabilities[notifcationOptions.name]);\n    }\n\n    /**\n     * Initialisiere class - create channel, states etc\n     */\n    async init(): Promise<void> {\n        switch (this.name as NotificationType.Type) {\n            case 'history':\n            case 'json':\n                {\n                    let dp = '';\n                    let def: any = genericStateObjects.history;\n                    const providers = this.adapter.providerController!.providers.filter((a) =>\n                        this.options.service.includes(a.service),\n                    );\n                    if (this.adapter.providerController) {\n                        const targets = [...providers, this.adapter.providerController];\n                        for (const a in targets) {\n                            switch (this.options.name as NotificationType.Type) {\n                                case 'history':\n                                    {\n                                        dp = `${targets[a].name}.history`;\n                                        def = genericStateObjects.history;\n                                    }\n                                    break;\n                                case 'json':\n                                    {\n                                        dp = `${targets[a].name}.activeWarnings_json`;\n                                        def = genericStateObjects.activeWarningsJson;\n                                    }\n                                    break;\n                            }\n                            const state = this.adapter.library.readdp(dp);\n                            if (state == undefined) {\n                                await this.adapter.library.writedp(dp, '[]', def);\n                            }\n                        }\n                    }\n                }\n                break;\n        }\n    }\n\n    /**\n     *  Send this message after filtering to services REWRITED\n     * @param messages the message with MessageClassRef Ref can be null\n     * @param action <string>\n     * @param manual <boolean> manual new/removeall handling\n     * @returns\n     */\n    async sendMessage(\n        providers: Provider.BaseProvider[],\n        allowActions: NotificationType.ActionsUnionType[],\n        manual: boolean = false,\n    ): Promise<void> {\n        if (!manual && !this.allowSending()) {\n            this.log.debug('Sending the notification is not allowed.');\n            return;\n        }\n        let activeWarnings = 0;\n        const filter = manual && this.options.filter.manual ? this.options.filter.manual : this.options.filter.auto;\n        const actions = this.options.actions;\n        let result: NotificationType.MessageType[] = [];\n        const notifications = this.options.notifications;\n        for (const a in providers) {\n            if (this.options.service.indexOf(providers[a].service) == -1) continue;\n\n            for (const b in providers[a].messages) {\n                const message = providers[a].messages[b];\n                if (\n                    message &&\n                    (filter.level === undefined || filter.level <= message.level) &&\n                    !filterWarntype(providers[a].service, filter.type, message.type)\n                ) {\n                    if (message.notDeleted) activeWarnings++;\n                    for (const c in actions) {\n                        const action: keyof NotificationType.ActionsType = c as keyof NotificationType.ActionsType;\n                        if (manual && NotificationType.manual.indexOf(action) == -1) continue;\n                        if (action == undefined || actions[action] == 'none' || actions[action] == '') continue;\n\n                        if (!allowActions.includes(action)) continue;\n\n                        if (!notifications.includes(action)) continue;\n\n                        const templateKey = actions[action as keyof typeof this.options.actions];\n                        if (!templateKey || templateKey == 'none') continue;\n                        if (action == 'removeAll') continue;\n                        // hier sollte nur 1 Warnungen durch gehen\n                        if (\n                            manual || // get every message\n                            (action == 'new' && message.newMessage) || // new message\n                            (action == 'remove' && !message.notDeleted) || // remove message\n                            action == 'manualAll' ||\n                            (action == 'all' &&\n                                // bei Diensten mit all sollten keine neuen oder entfernten nachrichten bei all durchlaufen.\n                                notifications.includes('all') &&\n                                !(notifications.includes('new') && message.newMessage) &&\n                                !(notifications.includes('remove') && !message.notDeleted))\n                        ) {\n                            const msg = await message.getMessage(templateKey, this);\n                            if (msg.text != '') {\n                                msg.action = action;\n                                msg.provider = providers[a];\n                                msg.message = message;\n                                if (\n                                    notifications.includes('title') &&\n                                    actions['title'] !== undefined &&\n                                    actions['title'] !== 'none'\n                                ) {\n                                    const title = await message.getMessage(actions['title'], this);\n                                    msg.title = title.text;\n                                }\n                                result.push(msg); // hier sammele die Nachrichten\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // \u00FCberpr\u00FCfe ob die all mit new/remove Ver\u00E4nderungen enth\u00E4lt au\u00DFer bei manutellen dann sortieren.\n        if (notifications.includes('all') && notifications.includes('new') && notifications.includes('remove')) {\n            let sendthem = manual;\n            if (!sendthem) {\n                for (const msg of result) {\n                    if (msg.message && (msg.message.newMessage || !msg.message.notDeleted)) {\n                        sendthem = true;\n                        break;\n                    }\n                }\n            }\n            if (!sendthem) {\n                result = [];\n            } else {\n                result.sort((a, b) => {\n                    if (!a.message) return 1;\n                    if (!b.message) return -1;\n                    if (\n                        (a.message.newMessage && b.message.newMessage) ||\n                        (!a.message.notDeleted && !b.message.notDeleted)\n                    )\n                        return a.startts == b.startts ? 0 : a.startts < b.startts ? -1 : 1;\n                    if (a.message.newMessage) return -1;\n                    if (b.message.newMessage) return 1;\n                    if (!a.message.notDeleted) return -1;\n                    if (!b.message.notDeleted) return 1;\n                    return a.startts == b.startts ? 0 : a.startts < b.startts ? -1 : 1;\n                });\n            }\n        }\n        /*if (manual && result.findIndex((a) => a.action != 'removeAll') > -1) {\n            result = result.filter((a) => a.action != 'removeAll');\n        }*/\n        if (result.length > 0 && activeWarnings > 0) {\n            await this.sendNotifications(result); // hier an alle\n            this.removeAllSend = false;\n        } else {\n            // no active Warnings every where, notification filter dont care.\n\n            if (\n                this.options.notifications.includes('removeAll') &&\n                this.options.actions['removeAll'] != 'none' &&\n                allowActions.includes('removeAll') &&\n                (manual || (!this.removeAllSend && activeWarnings == 0))\n            ) {\n                const templates = this.adapter.config.templateTable;\n                const tempid = templates.findIndex((a) => a.templateKey == this.options.actions['removeAll']);\n                if (tempid != -1) {\n                    const result = await this.adapter.providerController!.noWarning.getMessage(\n                        this.options.actions['removeAll'],\n                        this,\n                    );\n                    const msg: NotificationType.MessageType[] = [\n                        {\n                            text: result.text, // templates[tempid].template.replaceAll('\\\\}', '}'),\n                            startts: result.startts,\n                            template: result.template,\n                            action: result.action,\n                        },\n                    ];\n                    const res: NotificationType.MessageType | null =\n                        this.options.actions['title'] &&\n                        this.options.actions['title'] != 'none' &&\n                        templates.findIndex((a) => a.templateKey == this.options.actions['title']) != -1\n                            ? await this.adapter.providerController!.noWarning.getMessage(\n                                  this.options.actions['title'],\n                                  this,\n                              )\n                            : null;\n                    if (res !== null && res.text) msg[0].title = res.text;\n                    await this.sendNotifications(msg);\n                }\n                this.removeAllSend = true;\n            }\n        }\n    }\n\n    allowSending(): boolean {\n        switch (this.options.name) {\n            case 'telegram':\n            case 'pushover':\n            case 'whatsapp':\n            case 'json':\n            case 'history':\n            case 'email':\n                break;\n            case 'sayit':\n            case 'alexa2': {\n                // silentTime\n                return this.adapter.providerController!.isSpeakAllowed();\n            }\n        }\n        return true;\n    }\n\n    canManual(): boolean {\n        if (this.options.notifications.findIndex((a) => NotificationType.manual.indexOf(a) != -1) != -1) return true;\n        return false;\n    }\n    cleanupMessage(messages: NotificationType.MessageType[]): NotificationType.MessageType[] {\n        for (const message of messages) {\n            if (message === null || message == undefined) continue;\n            switch (this.options.name) {\n                case 'telegram':\n                case 'pushover':\n                case 'whatsapp':\n                case 'json':\n                case 'history':\n                case 'email':\n                    break;\n                case 'sayit':\n                case 'alexa2': {\n                    switch (this.library.language) {\n                        case 'en':\n                        case 'ru':\n                        case 'pt':\n                        case 'nl':\n                        case 'fr':\n                        case 'it':\n                        case 'es':\n                        case 'pl':\n                        case 'zh-cn':\n                        case 'uk':\n                        case 'de':\n                            {\n                                message.text = message.text.replace(/\\([0-9]+.m\\/s, [0-9]+.kn, Bft.[0-9]+../g, '');\n                                message.text = message.text.replace(/\\\u00B0C/g, this.library.getTranslation('celsius'));\n                                message.text = message.text.replace(/km\\/h/g, this.library.getTranslation('kmh'));\n                                message.text = message.text.replace(/l\\/m\\\u00B2/g, this.library.getTranslation('lm'));\n                                message.text = message.text.replace(\n                                    / [a-zA-Z][a-zA-Z], \\d{1,2}\\.\\d{1,2}\\.\\d{4} /g,\n                                    (x) => this.library.convertSpeakDate(x, this.options.name, true),\n                                );\n                                /* message.text = message.text.replace(/\\d{1,2}\\.\\d{1,2}\\... /gi, (x) =>\n                                        this.library.convertSpeakDate(x),\n                                );*/\n                                message.text = message.text.replaceAll(/\\\\+n/g, '');\n                                // insert ;\n                                // with endless protection\n                                let count = 0;\n                                let pos = 250;\n                                while (pos <= message.text.length && count++ < 50) {\n                                    const oldpos = pos;\n                                    pos = message.text.lastIndexOf(';', oldpos);\n                                    if (pos == -1 || pos == oldpos - 250) pos = message.text.lastIndexOf('.', oldpos);\n                                    if (pos == -1) pos = message.text.lastIndexOf(' ', oldpos);\n                                    if (pos == -1) break;\n                                    message.text = message.text.slice(0, pos) + ';' + message.text.slice(pos + 1);\n                                    pos += 250;\n                                }\n                            }\n                            break;\n                    }\n                }\n            }\n        }\n        return messages;\n    }\n\n    async sendNotifications(messages: NotificationType.MessageType[]): Promise<boolean> {\n        if (!Array.isArray(messages) || messages.length == 0) {\n            this.log.debug(`no messages`);\n            return false;\n        }\n        // own function\n        messages = this.cleanupMessage(Object.assign([], messages) as NotificationType.MessageType[]);\n\n        switch (this.options.name) {\n            case 'telegram':\n                {\n                    /*this.log.debug(\n                        JSON.stringify(\n                            messages.map((a) => {\n                                if (a.message) return a.message.rawWarning;\n                            }),\n                        ),\n                    );*/\n                    for (const msg of messages) {\n                        const opt: any = { text: msg.text, disable_notification: this.options.withNoSound };\n                        if (this.options.parse_mode != 'none') opt.parse_mode = this.options.parse_mode;\n                        if (this.options.userid.length > 0 || this.options.chatid.length > 0) {\n                            if (this.options.userid.length > 0) opt.user = this.options.userid;\n                            if (this.options.chatid.length > 0) {\n                                const chatids = this.options.chatid.split(',');\n                                for (const chatid of chatids)\n                                    this.adapter.sendTo(this.options.adapter, 'send', {\n                                        ...opt,\n                                        chatid: chatid,\n                                    });\n                            } else {\n                                this.adapter.sendTo(this.options.adapter, 'send', opt);\n                            }\n                        } else this.adapter.sendTo(this.options.adapter, 'send', opt);\n                        await library.sleep(50);\n                        this.log.debug(`Send the message: ${msg.text}`);\n                    }\n                }\n                break;\n            case 'pushover':\n                {\n                    for (const msg of messages) {\n                        const opt: NotificationType.pushover_options = {\n                            message: msg.text,\n                            sound: this.options.sound || 'none',\n                        };\n                        if (msg.title !== undefined && msg.title != '') {\n                            opt.title = msg.title;\n                        }\n                        if (this.options.priority) opt.priority = msg.message ? msg.message.level - 2 : -1;\n                        if (this.options.device.length > 0) opt.device = this.options.device;\n                        // stupid pushover adapter dont callback if he runs into a \"dont do this\"\n                        this.adapter.sendTo(this.options.adapter, 'send', opt);\n                        this.log.debug(`Send the message: ${msg.text}`);\n                        await library.sleep(50);\n                    }\n                }\n                break;\n            case 'whatsapp':\n                {\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) return false;\n                        const service = this.options.adapter.replace('whatsapp', 'whatsapp-cmb');\n                        // obj.message.phone\n                        const opt: { text: string; phone?: string } = { text: msg.text };\n                        if (this.options.phonenumber) opt.phone = this.options.phonenumber;\n                        this.adapter.sendTo(service, 'send', opt);\n                        await library.sleep(50);\n                        this.log.debug(`Send the message: ${msg.text}`);\n                    }\n                }\n                break;\n            case 'alexa2':\n                {\n                    const devices = this.adapter.config.alexa2_device_ids;\n\n                    if (devices.length == 0) break;\n\n                    let opt = '';\n                    if (this.options.sounds_enabled) {\n                        const prefix = `${this.options.volumen}`;\n                        for (const a in devices) {\n                            for (const msg of messages) {\n                                if (Array.isArray(msg)) continue;\n                                let index = -1;\n                                if (msg.message !== undefined && msg.message.notDeleted)\n                                    index = this.options.sounds.findIndex(\n                                        (a) => a.warntypenumber == Number(msg.message!.genericType),\n                                    );\n                                else index = this.options.sounds.findIndex((a) => a.warntypenumber == 0);\n                                const sound = this.options.sounds[index].sound;\n                                if (sound) opt += `;${sound};${msg.text}`;\n                                else opt += `;${msg.text}`;\n                            }\n                            this.log.debug(`Send to alexa2: ${prefix + opt}`);\n                            if (opt != '') {\n                                await this.adapter.setForeignStateAsync(\n                                    `${this.options.adapter}.Echo-Devices.${devices[a]}.Commands.speak`,\n                                    prefix + opt,\n                                );\n                            }\n                        }\n                    } else {\n                        const prefix = `${this.options.volumen}${this.options.audio ? `;${this.options.audio}` : ''}`;\n                        for (const a in devices) {\n                            for (const msg of messages) {\n                                if (Array.isArray(msg)) continue;\n                                opt += `;${msg.text}`;\n                            }\n                            this.log.debug(`Send to alexa2: ${prefix + opt}`);\n                            if (opt != '') {\n                                await this.adapter.setForeignStateAsync(\n                                    `${this.options.adapter}.Echo-Devices.${devices[a]}.Commands.speak`,\n                                    prefix + opt,\n                                );\n                            }\n                        }\n                    }\n                    /* Alexa code ask Apollon later\n                        const opt: any = {\n                            // value\n                            deviceSerialNumber: devices[0], // Serial number of one device to get Meta data which will be used if no device is pecified on the commands\n                            sequenceNodes: [], // list of sequences or commands\n                            sequenceType: 'ParallelNode', // \"SerialNode\" or \"ParallelNode\" for the provided sequenceNodes on main level. Default is \"SerialNode\"\n                        };\n                        for (const a in devices) {\n                            const optsub: any = { sequenceType: 'SerialNode', nodes: [] };\n                            optsub.nodes.push({\n                                command: 'speak-volume',\n                                value: 1, //this.adapter.config.alexa2_volumen,\n                                device: devices[a],\n                            });\n                            for (const msg of messages) {\n                                if (Array.isArray(msg)) continue;\n                                optsub.nodes.push({\n                                    command: 'speak',\n                                    value: `${this.adapter.config.alexa2_volumen};${msg.text}`,\n                                    device: devices[a],\n                                });\n                            }\n                            opt.sequenceNodes.push(optsub);\n                        }\n                        this.log.debug(\n                            JSON.stringify(\n                                await this.adapter.sendToAsync(this.options.adapter, 'sendSequenceCommand', opt),\n                            ),\n                        );*/\n                }\n                break;\n            case 'sayit':\n                {\n                    let d = '';\n                    const prefix = `${this.options.volumen};`;\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) continue;\n                        if (msg.text != '') {\n                            await this.adapter.setForeignStateAsync(\n                                `${this.options.adapter}.tts.text`,\n                                prefix + msg.text,\n                            );\n                            d += prefix + msg.text;\n                        }\n                    }\n                    this.log.debug(`Send to sayit: ${d}`);\n                }\n                break;\n            case 'history':\n                {\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) return false;\n                        if (!msg || !msg.provider || !this.adapter.config.history_Enabled || !msg.message) return false;\n                        let newMsg: object = { message: msg.text };\n                        if (this.adapter.config.history_allinOne) {\n                            newMsg = { ...msg.message.formatedData, ts: Date.now() };\n                        }\n                        const targets = [msg.provider.name, msg.provider.providerController.name];\n                        for (const a in targets) {\n                            try {\n                                const dp = `${targets[a]}.history`;\n                                const state = this.adapter.library.readdp(dp);\n                                let json: object[] = [];\n                                if (state && state.val && typeof state.val == 'string' && state.val != '')\n                                    json = JSON.parse(state.val);\n                                json.unshift(newMsg);\n                                json.splice(500);\n                                await this.adapter.library.writedp(\n                                    dp,\n                                    JSON.stringify(json),\n                                    genericStateObjects.history,\n                                );\n                            } catch (error) {\n                                this.log.error(\n                                    `${this.name} template has wrong formate. ${this.name} deactivated! template: ${\n                                        msg.action ? this.options.actions[msg.action] : 'unknown'\n                                    }, message: ${msg}`,\n                                );\n                                this.adapter.config.history_Enabled = false;\n                                return false;\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'json':\n                {\n                    // testrun to get a good error\n                    let result: any[] = [];\n                    let providers: string[] = [];\n                    for (const a in messages) {\n                        try {\n                            const temp = this.adapter.config.json_parse\n                                ? JSON.parse(messages[a].text)\n                                : messages[a].text;\n                            result.push({\n                                startts: messages[a].startts,\n                                message: temp,\n                                provider: messages[a].provider,\n                            });\n                            providers.push(messages[a].provider !== undefined ? messages[a].provider!.name : '');\n                        } catch (error) {\n                            this.log.error(\n                                `Json template has wrong formate. Conversion deactivated! template: ${messages[a].template}, message: ${messages[a].text}`,\n                            );\n                            this.adapter.config.json_parse = false;\n                            continue;\n                        }\n                    }\n                    // double providers\n                    providers = providers.filter((i, p) => {\n                        if (i != '') {\n                            if (providers.indexOf(i) == p) return true;\n                        }\n                        return false;\n                    });\n                    // double message\n                    result = result.filter((i, p) => {\n                        if (i.message != '' && i.provider) {\n                            if (\n                                result.findIndex(\n                                    (i2) => i2.provider.name == i.provider.name && i2.message == i.message,\n                                ) == p\n                            )\n                                return true;\n                        }\n                        return false;\n                    });\n                    // sort\n                    result.sort((a, b) => {\n                        if (a.provider > b.provider) return 1;\n                        else if (a.provider < b.provider) return -1;\n                        else return a.startts - b.startts;\n                    });\n                    for (const p of providers) {\n                        const dp = p + '.activeWarnings_json';\n                        const data = result.filter((a) => a.provider && a.provider.name == p).map((a) => a.message);\n                        await this.adapter.library.writedp(\n                            dp,\n                            JSON.stringify(data),\n                            genericStateObjects.activeWarningsJson,\n                        );\n                    }\n                    // filter double all\n                    result = result.filter((i, p) => {\n                        if (i.message != '' && i.provider) {\n                            if (result.findIndex((i2) => i2.message == i.message) == p) return true;\n                        }\n                        return false;\n                    });\n                    if (this.adapter.providerController) {\n                        const dp = this.adapter.providerController.name + '.activeWarnings_json';\n                        await this.adapter.library.writedp(\n                            dp,\n                            JSON.stringify(result.map((a) => a.message)),\n                            genericStateObjects.activeWarningsJson,\n                        );\n                    }\n                }\n                break;\n            case 'email':\n                {\n                    const result = messages.filter((i, p) => {\n                        if (i.text != '') {\n                            if (messages.findIndex((i2) => i2.text == i.text) == p) return true;\n                        }\n                        return false;\n                    });\n                    const opt: any = {};\n                    if (result.length > 0 && messages.length > 0 && messages[0].title) {\n                        opt.subject = messages[0].title;\n                    }\n                    opt.html = result.map((a) => a.text).join(this.adapter.config.email_line_break);\n                    const templates = this.adapter.config.templateTable;\n                    // das hier ist noch nicht gut, subject sollte vom Nutzer besser bestimmbar sein.\n                    let token = 'message.status.new';\n                    if (messages[0].action == 'removeAll') token = 'message.status.clear';\n                    if (this.adapter.config.email_Header !== 'none') {\n                        const tempid = templates.findIndex((a) => a.templateKey == this.adapter.config.email_Header);\n                        if (tempid != -1) {\n                            const temp = templates[tempid].template.replace(\n                                '${emailheader}',\n                                await this.adapter.library.getTranslation(token),\n                            );\n                            opt.html = temp + opt.html;\n                        }\n                    }\n                    if (this.adapter.config.email_Footer !== 'none') {\n                        const tempid = templates.findIndex((a) => a.templateKey == this.adapter.config.email_Footer);\n                        if (tempid != -1) {\n                            opt.html = opt.html + templates[tempid].template;\n                        }\n                    }\n                    this.log.debug(`start email sending! Messagecount: ${result.length}`);\n                    this.adapter.sendTo(this.options.adapter, 'send', opt);\n                    await library.sleep(50);\n                    this.log.debug(`Send the message: ${JSON.stringify(opt)}`);\n                }\n                break;\n        }\n        return true;\n    }\n}\n"],
  "mappings": "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",
  "names": ["result", "a"]
}
