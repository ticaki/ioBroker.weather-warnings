{
  "version": 3,
  "sources": ["../../src/lib/notification.ts"],
  "sourcesContent": ["import WeatherWarnings from '../main';\nimport { genericStateObjects } from './def/definitionen';\nimport * as NotificationType from './def/notificationService-def';\nimport * as library from './library';\nimport * as Provider from './def/provider-def';\nimport { MessagesClass } from './messages';\n\nexport class NotificationClass extends library.BaseClass {\n    options: NotificationType.BaseType;\n    takeThemAll = false;\n    config: NotificationType.ConfigType;\n    providerDB: any;\n    removeAllSend: boolean = true;\n\n    //clearAll(): void {}\n\n    constructor(adapter: WeatherWarnings, notifcationOptions: NotificationType.BaseType) {\n        super(adapter, notifcationOptions.name);\n        this.log.debug(`Create notification service ${this.name}`);\n        this.options = notifcationOptions;\n        this.config = NotificationType.serciceCapabilities[notifcationOptions.name];\n    }\n\n    /**\n     * Initialisiere class - create channel, states etc\n     */\n    async init(): Promise<void> {\n        switch (this.name as NotificationType.Type) {\n            case 'history':\n            case 'json':\n                {\n                    let dp = '';\n                    let def: any = genericStateObjects.history;\n                    const providers = this.adapter.providerController!.providers.filter((a) =>\n                        this.options.service.includes(a.service),\n                    );\n                    if (this.adapter.providerController) {\n                        const targets = [...providers, this.adapter.providerController];\n                        for (const a in targets) {\n                            switch (this.name as NotificationType.Type) {\n                                case 'history':\n                                    {\n                                        dp = `${targets[a].name}.history`;\n                                        def = genericStateObjects.history;\n                                    }\n                                    break;\n                                case 'json':\n                                    {\n                                        dp = `${targets[a].name}.activeWarnings_json`;\n                                        def = genericStateObjects.activeWarningsJson;\n                                    }\n                                    break;\n                            }\n                            const state = this.adapter.library.getdb(dp);\n                            if (state == undefined) {\n                                await this.adapter.library.writedp(dp, '[]', def);\n                            }\n                        }\n                    }\n                }\n                break;\n        }\n    }\n\n    /**\n     *  Send this message after filtering to services REWRITED\n     * @param messages the message with MessageClassRef Ref can be null\n     * @param action <string>\n     * @param override <boolean> override new/removeall handling\n     * @returns\n     */\n    async sendMessage(\n        providers: Provider.BaseProvider[],\n        allowActions: NotificationType.ActionsUnionType[],\n        override: boolean = false,\n    ): Promise<void> {\n        let activeWarnings = 0;\n        const result: NotificationType.MessageType[] = [];\n        for (const a in providers) {\n            if (this.options.service.indexOf(providers[a].service) == -1) continue;\n            //const resultProvider: NotificationType.MessageType[] = [];\n            for (const b in providers[a].messages) {\n                const message = providers[a].messages[b];\n                if (\n                    message &&\n                    (this.options.filter.level === undefined || this.options.filter.level <= message.level) &&\n                    this.options.filter.type.indexOf(String(message.genericType)) == -1\n                ) {\n                    if (message.notDeleted) activeWarnings++;\n                    for (const c in this.options.actions) {\n                        const action: keyof NotificationType.ActionsType = c as keyof NotificationType.ActionsType;\n                        if (\n                            this.options.actions[action] == 'none' ||\n                            this.options.actions[action] == '' ||\n                            action == undefined\n                        )\n                            continue;\n\n                        if (!allowActions.includes(action)) continue;\n\n                        if (!this.config.notifications.includes(action)) continue;\n\n                        const msg = await this.getMessage(\n                            message,\n                            this.config.notifications,\n                            this.options.actions[action as keyof typeof this.options.actions]!,\n                            action,\n                            override,\n                        );\n                        if (msg.text != '') {\n                            msg.action = action;\n                            msg.provider = providers[a];\n                            msg.message = message;\n                            //if (this.config.notifications.includes('all'))\n                            result.push(msg); // hier sammele die Nachrichten\n\n                            //else this.sendNotifications(msg, message, action); // hier versende die Nachrichten aber nicht an Dienste mit all\n                        }\n                    }\n                }\n            }\n            //if (resultProvider.length > 0) await this.sendNotifications(resultProvider); // hier an alle\n\n            //if (this.config.notifications.includes('all')) result = result.concat(resultProvider); // hier sammele die Nachrichten\n        }\n        if (result.length > 0 && activeWarnings > 0) {\n            await this.sendNotifications(result); // hier an alle\n            this.removeAllSend = false;\n        } else {\n            // no active Warnings every where, notification filter dont care.\n\n            if (\n                this.config.notifications.includes('removeAll') &&\n                this.options.actions['removeAll'] != 'none' &&\n                (override || (!this.removeAllSend && activeWarnings == 0))\n            ) {\n                const templates = this.adapter.config.templateTable;\n                const tempid = templates.findIndex((a) => a.templateKey == this.options.actions['removeAll']);\n                if (tempid != -1) {\n                    this.sendNotifications([\n                        {\n                            text: templates[tempid].template.replaceAll('\\\\', ''),\n                            startts: 1,\n                            template: templates[tempid].template,\n                            action: 'removeAll',\n                        },\n                    ]);\n                }\n                this.removeAllSend = true;\n            }\n        }\n    }\n    async getMessage(\n        message: MessagesClass,\n        templateType: NotificationType.ActionsUnionType[],\n        templateKey: string,\n        action: NotificationType.ActionsUnionType,\n        override: boolean = false,\n    ): Promise<NotificationType.MessageType> {\n        return await message.getMessage(templateType, templateKey, action, override);\n    }\n\n    async sendNotifications(messages: NotificationType.MessageType[]): Promise<boolean> {\n        if (!Array.isArray(messages) || messages.length == 0) {\n            this.log.debug(`no messages`);\n            return false;\n        }\n\n        switch (this.name as NotificationType.Type) {\n            case 'telegram':\n                {\n                    for (const msg of messages) {\n                        const opt = { text: msg.text, disable_notification: true };\n\n                        await this.adapter.sendToAsync(this.options.adapter, 'send', opt);\n                        this.log.debug(`Send the message: ${msg.text}`);\n                    }\n                }\n                break;\n            case 'pushover':\n                {\n                    for (const msg of messages) {\n                        const opt = { message: msg.text };\n                        //newMsg.title = topic;newMsg.device sound = `none`\n                        await this.adapter.sendToAsync(this.options.adapter, 'send', opt);\n                        this.log.debug(`Send the message: ${msg.text}`);\n                    }\n                }\n                break;\n            case 'whatsapp':\n                {\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) return false;\n                        const service = this.options.adapter.replace('whatsapp', 'whatsapp-cmb');\n                        // obj.message.phone\n                        const opt = { text: msg.text };\n\n                        await this.adapter.sendToAsync(service, 'send', opt);\n                        this.log.debug(`Send the message: ${msg.text}`);\n                    }\n                }\n                break;\n            case 'alexa2':\n                {\n                    const devices = this.adapter.config.alexa2_device_ids;\n\n                    if (devices.length == 0) break;\n\n                    let opt = `${this.adapter.config.alexa2_volumen}`;\n                    for (const a in devices) {\n                        for (const msg of messages) {\n                            if (Array.isArray(msg)) continue;\n                            opt += `;${msg.text}`;\n                        }\n                        if (opt != `${this.adapter.config.alexa2_volumen}`) {\n                            await this.adapter.setForeignStateAsync(\n                                `${this.options.adapter}.Echo-Devices.${devices[a]}.Commands.speak`,\n                                opt,\n                            );\n                        }\n                    }\n                    /*\n                    const opt: any = {\n                        // value\n                        deviceSerialNumber: devices[0], // Serial number of one device to get Meta data which will be used if no device is pecified on the commands\n                        sequenceNodes: [], // list of sequences or commands\n                        sequenceType: 'ParallelNode', // \"SerialNode\" or \"ParallelNode\" for the provided sequenceNodes on main level. Default is \"SerialNode\"\n                    };\n                    for (const a in devices) {\n                        const optsub: any = { sequenceType: 'SerialNode', nodes: [] };\n                        optsub.nodes.push({\n                            command: 'speak-volume',\n                            value: 1, //this.adapter.config.alexa2_volumen,\n                            device: devices[a],\n                        });\n                        for (const msg of messages) {\n                            if (Array.isArray(msg)) continue;\n                            optsub.nodes.push({\n                                command: 'speak',\n                                value: `${this.adapter.config.alexa2_volumen};${msg.text}`,\n                                device: devices[a],\n                            });\n                        }\n                        opt.sequenceNodes.push(optsub);\n                    }\n                    this.log.debug(\n                        JSON.stringify(\n                            await this.adapter.sendToAsync(this.options.adapter, 'sendSequenceCommand', opt),\n                        ),\n                    );*/\n                }\n                break;\n            case 'history':\n                {\n                    for (const msg of messages) {\n                        if (Array.isArray(msg)) return false;\n                        if (!msg || !msg.provider || !this.adapter.config.history_Enabled || !msg.message) return false;\n                        let newMsg = msg.text;\n                        if (this.adapter.config.history_allinOne) {\n                            newMsg = JSON.stringify({ ...msg.message.formatedData, ts: Date.now() });\n                        }\n                        const targets = [msg.provider.name, msg.provider.providerController.name];\n                        for (const a in targets) {\n                            try {\n                                const dp = `${targets[a]}.history`;\n                                const state = this.adapter.library.getdb(dp);\n                                let json: object[] = [];\n                                if (state && state.val && typeof state.val == 'string' && state.val != '')\n                                    json = JSON.parse(state.val);\n                                json.unshift(typeof newMsg == 'object' ? JSON.parse(newMsg) : newMsg);\n                                json.splice(500);\n                                await this.adapter.library.writedp(\n                                    dp,\n                                    JSON.stringify(json),\n                                    genericStateObjects.history,\n                                );\n                            } catch (error) {\n                                this.log.error(\n                                    `${this.name} template has wrong formate. ${this.name} deactivated! template: ${\n                                        msg.action ? this.options.actions[msg.action] : 'unknown'\n                                    }, message: ${msg}`,\n                                );\n                                this.adapter.config.history_Enabled = false;\n                                return false;\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'json':\n                {\n                    // testrun to get a good error\n                    let result: any[] = [];\n                    let providers: string[] = [];\n                    for (const a in messages) {\n                        try {\n                            const temp = this.adapter.config.json_parse\n                                ? JSON.parse(messages[a].text)\n                                : messages[a].text;\n                            result.push({\n                                startts: messages[a].startts,\n                                message: temp,\n                                provider: messages[a].provider,\n                            });\n                            providers.push(messages[a].provider !== undefined ? messages[a].provider!.name : '');\n                        } catch (error) {\n                            this.log.error(\n                                `Json template has wrong formate. Conversion deactivated! template: ${messages[a].template}, message: ${messages[a].text}`,\n                            );\n                            this.adapter.config.json_parse = false;\n                            continue;\n                        }\n                    }\n                    // double providers\n                    providers = providers.filter((i, p) => {\n                        if (i != '') {\n                            if (providers.indexOf(i) == p) return true;\n                        }\n                        return false;\n                    });\n                    // double message\n                    result = result.filter((i, p) => {\n                        if (i.message != '' && i.provider) {\n                            if (\n                                result.findIndex(\n                                    (i2) => i2.provider.name == i.provider.name && i2.message == i.message,\n                                ) == p\n                            )\n                                return true;\n                        }\n                        return false;\n                    });\n                    // sort\n                    result.sort((a, b) => {\n                        if (a.provider > b.provider) return 1;\n                        else if (a.provider < b.provider) return -1;\n                        else return a.startts - b.startts;\n                    });\n                    for (const p of providers) {\n                        const dp = p + '.activeWarnings_json';\n                        const data = result.filter((a) => a.provider && a.provider.name == p).map((a) => a.message);\n                        await this.adapter.library.writedp(\n                            dp,\n                            JSON.stringify(data),\n                            genericStateObjects.activeWarningsJson,\n                        );\n                    }\n                    // filter double all\n                    result = result.filter((i, p) => {\n                        if (i.message != '' && i.provider) {\n                            if (result.findIndex((i2) => i2.message == i.message) == p) return true;\n                        }\n                        return false;\n                    });\n                    if (this.adapter.providerController) {\n                        const dp = this.adapter.providerController.name + '.activeWarnings_json';\n                        await this.adapter.library.writedp(\n                            dp,\n                            JSON.stringify(result.map((a) => a.message)),\n                            genericStateObjects.activeWarningsJson,\n                        );\n                    }\n                }\n                break;\n            case 'email':\n                {\n                    this.log.info(`start email sending! Messagecount: ${messages.length}`);\n                    const result = messages.filter((i, p) => {\n                        if (i.text != '' && i.provider) {\n                            if (messages.findIndex((i2) => i2.text == i.text) == p) return true;\n                        }\n                        return false;\n                    });\n                    this.log.info(`first filter! Messagecount: ${result.length}`);\n                    result.sort((a, b) => a.startts - b.startts);\n                    const flat: string[] = result.map((a) => a.text);\n\n                    let message = flat.join(this.adapter.config.email_line_break);\n                    const templates = this.adapter.config.templateTable;\n                    this.log.info(`Email message: ${message.length}`);\n                    if (this.adapter.config.email_Header !== 'none') {\n                        const tempid = templates.findIndex((a) => a.templateKey == this.adapter.config.email_Header);\n                        if (tempid != -1) {\n                            let token = 'notification.warning';\n                            if (messages[0].action == 'removeAll') token = 'notification.allclear';\n                            const temp = templates[tempid].template.replace(\n                                '${emailheader}',\n                                await this.adapter.library.getTranslation(token),\n                            );\n                            message = temp + message;\n                        }\n                    }\n                    if (this.adapter.config.email_Footer !== 'none') {\n                        const tempid = templates.findIndex((a) => a.templateKey == this.adapter.config.email_Header);\n                        if (tempid != -1) {\n                            message = message + templates[tempid];\n                        }\n                    }\n                    this.log.debug(`start email sending! Messagecount: ${result.length}`);\n                    await this.adapter.sendToAsync(this.options.adapter, 'send', message);\n                    this.log.debug(`Send the message: ${message}`);\n                }\n                break;\n        }\n\n        return true;\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
