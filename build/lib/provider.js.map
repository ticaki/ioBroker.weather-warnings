{
  "version": 3,
  "sources": ["../../src/lib/provider.ts"],
  "sourcesContent": ["// Provider\n\nimport axios from 'axios';\nimport WeatherWarnings from '../main';\nimport * as definitionen from './def/definitionen';\nimport { BaseClass, Library } from './library';\nimport * as providerDef from './def/provider-def';\nimport { MessagesClass } from './messages';\nimport * as NotificationClass from './notification';\nimport { getTestData } from './test-warnings';\nimport * as NotificationType from './def/notificationService-def';\nimport * as messagesDef from './def/messages-def';\nexport const DIV = '-';\ntype ProviderOptionsTypeInternal = {\n    service: providerDef.providerServices;\n    warncellId: string | [string, string];\n} & (StringProviderOptionsType | CoordinateProviderOptionsType);\n\ntype ProviderOptionsType = ProviderOptionsTypeInternal;\n\ntype StringProviderOptionsType = BaseProviderOptionsType & {\n    warncellId: string;\n};\ntype CoordinateProviderOptionsType = BaseProviderOptionsType & {\n    warncellId: [string, string];\n};\ntype BaseProviderOptionsType = {\n    providerController: ProviderController;\n    language: string;\n    filter: providerDef.messageFilterType;\n    customName: string;\n};\n\n/** Base class for every provider */\nexport class BaseProvider extends BaseClass {\n    service: providerDef.providerServices;\n    url: string = '';\n    warncellId: string | Array<string> = '';\n    rawData: providerDef.DataImportType = null;\n    library: Library;\n    messages: MessagesClass[] = [];\n    providerController: ProviderController;\n    filter: providerDef.messageFilterType;\n    customName: string = '';\n    warncellIdString: string;\n    constructor(adapter: WeatherWarnings, options: ProviderOptionsTypeInternal, name: string) {\n        let warncell = typeof options.warncellId == 'string' ? options.warncellId : options.warncellId.join(DIV);\n        warncell = warncell.replaceAll('.', '_');\n        super(adapter, 'provider.' + `${name}.${warncell}`);\n\n        this.warncellIdString = warncell;\n        this.service = options.service;\n        this.library = this.adapter.library;\n        this.providerController = options.providerController;\n        this.setService(options.service);\n        this.log.setLogPrefix(`${name}-${options.warncellId}`);\n        this.filter = options.filter;\n        this.customName = options.customName;\n\n        const temp = this.library.cloneGenericObject(\n            //@ts-expect-error ist vorhanden\n            definitionen.statesObjectsWarnings[this.service]._channel,\n        ) as ioBroker.DeviceObject;\n        temp.common.name = name.toUpperCase();\n        this.library.writedp('provider.' + name, undefined, temp);\n\n        this.init();\n    }\n    async init(): Promise<void> {\n        const temp = this.library.cloneGenericObject(definitionen.defaultChannel) as ioBroker.ChannelObject;\n        temp.common.name = this.customName;\n        await this.library.writedp(`${this.name}`, undefined, temp);\n        await this.adapter.extendObjectAsync(`${this.name}`, {\n            common: { name: this.customName },\n        });\n\n        await this.library.writedp(`${this.name}.info`, undefined, definitionen.genericStateObjects.info._channel);\n        await this.library.writedp(\n            `${this.name}.formatedKeys`,\n            undefined,\n            definitionen.genericStateObjects.formatedKeysDevice,\n        );\n\n        this.setConnected(false);\n    }\n\n    delete(): void {\n        this.rawData = null;\n        this.setConnected(false);\n    }\n\n    getService(): providerDef.providerServices {\n        if (!this.service) {\n            throw new Error(`baseProvider.getService service is ${this.service == '' ? `''` : `undefined`}`);\n        }\n        return this.service;\n    }\n    /*getStatesObjectsWarnings(key: string): { [key: string]: ioBroker.Object } {\n        return statesObjectsWarnings[this.service][key];\n    }*/\n\n    setService(service: providerDef.providerServices): boolean {\n        if (\n            !service ||\n            ['dwdService', 'zamgService', 'uwzService', 'ninaService', 'metroService'].indexOf(service) === -1\n        ) {\n            throw new Error(`baseProvider.setService service ${service} is unknowed!`);\n        }\n        this.service = service;\n        return true;\n    }\n\n    /**\n     * @param url if '' url from PROVIDER_OPTIONS is taken\n     * @param keys [string] values to replace - placeholder #  # #+  +# #++  ++# and so on\n     */\n    setUrl(url: string = '', keys: string[]): string {\n        if (!url) {\n            this.url = definitionen.PROVIDER_OPTIONS[this.service]['url'];\n        } else {\n            this.url = url;\n        }\n        let placeholder = '#  #';\n        for (const k in keys) {\n            this.url = this.url.replace(placeholder, keys[k]);\n            placeholder = placeholder.slice(0, 1) + '+' + placeholder.slice(1, -1) + '+' + placeholder.slice(-1);\n        }\n        return this.url;\n    }\n    async setConnected(status: boolean): Promise<void> {\n        this.providerController.connection = this.providerController.connection || status;\n        const objDef = await this.library.getObjectDefFromJson(`info.connection`, definitionen.genericStateObjects);\n        this.library.writedp(`${this.name}.info.connection`, !!status, objDef);\n    }\n    async update(): Promise<void> {\n        // tue nichts\n    }\n    static async setAlerts(\n        that: BaseProvider | ProviderController,\n        prefix: string,\n        data: { [key: string]: string | number | boolean },\n    ): Promise<void> {\n        await that.library.writeFromJson(\n            prefix + '.alerts',\n            'allService.alerts',\n            definitionen.statesObjectsWarnings,\n            data,\n            false,\n        );\n    }\n    async getAlertsAndWrite(): Promise<messagesDef.genericWarntypeAlertJsonType> {\n        const reply: any = {};\n        for (const t in messagesDef.genericWarntyp) {\n            reply[messagesDef.genericWarntyp[Number(t) as keyof messagesDef.genericWarntypeType].id] = {\n                level: -1,\n                start: 1,\n                end: 1,\n                headline: '',\n                active: false,\n                type: -1,\n            };\n        }\n\n        if (!reply) throw new Error('error(234) reply not definied');\n        for (const a in this.messages) {\n            const m = this.messages[a];\n            if (!m) continue;\n            const name = messagesDef.genericWarntyp[m.genericType].id;\n            if (reply[name] === undefined) continue;\n            if (m.endtime < Date.now()) continue;\n\n            if (m.starttime < Date.now() && reply[name].level < m.level) {\n                reply[name] = {\n                    level: m.level,\n                    start: m.starttime,\n                    end: m.endtime,\n                    headline: m.formatedData !== undefined ? String(m.formatedData.headline) : '',\n                    active: m.starttime <= Date.now() && m.endtime >= Date.now(),\n                    type: -1,\n                };\n            }\n        }\n        await BaseProvider.setAlerts(this, this.name, reply);\n        return reply;\n    }\n    // General function that retrieves data\n    async getDataFromProvider(): Promise<providerDef.DataImportType> {\n        if (!this.url || !this.warncellId) {\n            this.log.debug(\n                // eslint-disable-next-line prettier/prettier\n                `Warn (31) this.url: ${this.url} this.warncellid: ${this.warncellId} this.service: ${this.getService()}`,\n            );\n        }\n        try {\n            if (this.unload) {\n                return;\n            }\n\n            // show text mode in Info states\n            const objDef = await this.library.getObjectDefFromJson(`info.testMode`, definitionen.genericStateObjects);\n            this.library.writedp(`${this.name}.info.testMode`, this.adapter.config.useTestWarnings, objDef);\n            if (this.adapter.config.useTestWarnings) {\n                return this.library.cloneGenericObject(\n                    getTestData(this.service, this.adapter) as object,\n                ) as providerDef.DataImportType;\n            } else {\n                const data = await axios.get(this.url);\n                if (data.status == 200) {\n                    await this.setConnected(true);\n\n                    const result = typeof data.data == 'object' ? data.data : JSON.parse(data.data);\n\n                    this.library.writedp(\n                        `${this.name}.warning.warning_json`,\n                        JSON.stringify(result),\n                        definitionen.genericStateObjects.warnings_json,\n                    );\n                    if (this.adapter.config.useJsonHistory) {\n                        const dp = `${this.name}.warning.jsonHistory`;\n                        const state = this.library.readdp(dp);\n                        let history: object[] = [];\n                        if (state && state.val && typeof state.val == 'string') history = JSON.parse(state.val);\n                        history.unshift(result);\n                        this.library.writedp(dp, JSON.stringify(history), definitionen.genericStateObjects.jsonHistory);\n                    }\n                    this.library.writedp(\n                        `${this.name}.lastUpdate`,\n                        Date.now(),\n                        definitionen.genericStateObjects.lastUpdate,\n                    );\n                    return result;\n                } else {\n                    this.log.warn('Warn(23) ' + data.statusText);\n                }\n            }\n        } catch (error) {\n            if (axios.isAxiosError(error)) {\n                this.log.warn(`Warn(21) axios error for ${this.getService()} url: ${this.url}`);\n            } else {\n                this.log.error(`Error(22) no data for ${this.getService()} from ${this.url} with Error ${error}`);\n            }\n        }\n        await this.setConnected(false);\n        return null;\n    }\n    //** Called at the end of updateData() from every childclass */\n    async finishUpdateData(): Promise<void> {\n        for (let m = 0; m < this.messages.length; m++) {\n            this.messages.sort((a, b) => {\n                return a.starttime - b.starttime;\n            });\n            await this.messages[m].writeFormatedKeys(m);\n\n            //await this.messages[m].formatMessages();\n        }\n        this.library.garbageColleting(`${this.name}.formatedKeys`, (this.providerController.refreshTime || 600000) / 2);\n    }\n    /**\n     * generic write function for flat Objects\n     * @param prefix {string}   prefix in datatree\n     * @param data              json object flat\n     * @returns                 void\n     */\n    async dumpData(prefix: string, data: providerDef.DataImportType): Promise<void> {\n        if (!prefix || !data || typeof data !== 'object') return;\n        for (const key in data) {\n            //@ts-expect-error write code for next line\n            this.adapter.library.writeState(`${prefix}`, key, data[key]);\n        }\n    }\n    async updateData(data: any, counter: number): Promise<void> {\n        if (!data) return;\n        this.library.writedp(`${this.name}.warning`, undefined, definitionen.genericStateObjects.warningDevice);\n        await this.library.writeFromJson(\n            `${this.name}.warning.${('00' + counter.toString()).slice(-2)}`,\n            `${this.service}.raw`,\n            definitionen.statesObjectsWarnings,\n            data,\n        );\n    }\n    /** Remove marked Messages. */\n    async clearMessages(): Promise<void> {\n        for (let m = 0; m < this.messages.length; m++) {\n            this.messages[m].newMessage = false;\n            if (this.messages[m].notDeleted == false) {\n                this.log.debug('Remove a warning from db.');\n                this.messages.splice(Number(m--), 1);\n            }\n        }\n    }\n}\n\n// nuzte klassen um Daten zu parsen\nexport class DWDProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: StringProviderOptionsType) {\n        super(adapter, { ...options, service: 'dwdService' }, `dwd`);\n        this.warncellId = options.warncellId;\n        const url =\n            definitionen.PROVIDER_OPTIONS.dwdService.url_base +\n            (this.warncellId.startsWith('9') || this.warncellId.startsWith('10')\n                ? definitionen.PROVIDER_OPTIONS.dwdService.url_appendix_land\n                : definitionen.PROVIDER_OPTIONS.dwdService.url_appendix_town) +\n            definitionen.PROVIDER_OPTIONS.dwdService.url_language;\n        this.url = this.setUrl(url, [this.warncellId, options.language]);\n    }\n    async updateData(): Promise<void> {\n        const result = (await this.getDataFromProvider()) as providerDef.dataImportDwdType;\n        if (!result) return;\n        this.log.debug(`Got ${result.features.length} warnings from server`);\n        result.features.sort((a, b) => {\n            return new Date(a.properties.ONSET).getTime() - new Date(b.properties.ONSET).getTime();\n        });\n        this.messages.forEach((a) => (a.notDeleted = false));\n        for (let a = 0; a < this.adapter.numOfRawWarnings && a < result.features.length; a++) {\n            const w = result.features[a];\n            if (w.properties.STATUS == 'Test') continue;\n            if (this.filter.hours && new Date(w.properties.ONSET).getTime() > Date.now() + this.filter.hours * 3600000)\n                continue;\n            await super.updateData(w.properties, a);\n\n            /**\n             * filter messages dwd\n             */\n            const index = this.messages.findIndex((m) => m.rawWarning.IDENTIFIER == w.properties.IDENTIFIER);\n\n            if (index == -1) {\n                const nmessage = new MessagesClass(\n                    this.adapter,\n                    'dwd-msg',\n                    this,\n                    w.properties,\n                    this.providerController,\n                );\n                await nmessage.updateFormated();\n\n                if (nmessage && nmessage.filter(this.filter)) this.messages.push(nmessage);\n            } else {\n                this.messages[index].updateData(w.properties);\n            }\n        }\n        this.library.garbageColleting(`${this.name}.warning`);\n\n        for (let m = 0; m < this.messages.length; m++) {\n            const msg = this.messages[m];\n            //const formatedData = await msg.updateFormatedData();\n            if (msg.rawWarning.MSGTYPE == 'Update') {\n                for (let m2 = 0; m2 < this.messages.length; m2++) {\n                    const oldmsg = this.messages[m2];\n                    if (msg === oldmsg) continue;\n                    if (oldmsg.newMessage) continue;\n                    //if (oldmsg.notDeleted) continue;\n                    if (oldmsg.formatedData === undefined) continue; // \u00FCberfl\u00FCssig?\n                    if (oldmsg.rawWarning.EC_II == msg.rawWarning.EC_II) {\n                        msg.silentUpdate();\n                        this.log.debug('Remove a warning from db.(Update)');\n                        this.messages[m2].delete();\n                        this.messages.splice(Number(m2--), 1);\n                        m--;\n                        break;\n                    }\n                }\n            }\n        }\n        /**\n         * Hier war ich dran\n         */\n        //this.library.writeJson('', '', this.rawData, this.getStatesObjectsWarnings('raw').false);\n        await this.finishUpdateData();\n    }\n}\n\nexport class ZAMGProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: CoordinateProviderOptionsType) {\n        super(adapter, { ...options, service: 'zamgService' }, `zamg`);\n        this.warncellId = options.warncellId;\n        this.setUrl('', [this.warncellId[0], this.warncellId[1], options.language]);\n    }\n\n    async updateData(): Promise<void> {\n        const result = (await this.getDataFromProvider()) as providerDef.dataImportZamgType;\n        if (!result) return;\n\n        if (!result.properties || !result.properties.warnings) {\n            this.log.debug(`Got 0 warnings from server`);\n            return;\n        } else this.log.debug(`Got ${result.properties.warnings.length} warnings from server`);\n        result.properties.warnings.sort((a, b) => {\n            return Number(a.properties.rawinfo.start) - Number(b.properties.rawinfo.start);\n        });\n        this.messages.forEach((a) => (a.notDeleted = false));\n        for (let a = 0; a < this.adapter.numOfRawWarnings && a < result.properties.warnings.length; a++) {\n            if (\n                this.filter.hours &&\n                Number(result.properties.warnings[a].properties.rawinfo.start) > Date.now() + this.filter.hours * 3600\n            )\n                continue;\n            // special case for zamg\n            result.properties.warnings[a].properties.location = result.properties.location.properties.name;\n            result.properties.warnings[a].properties.nachrichtentyp = result.properties.warnings[a].type;\n            await super.updateData(result.properties.warnings[a].properties, a);\n\n            const index = this.messages.findIndex(\n                (m) => m.rawWarning.warnid == result.properties.warnings[a].properties.warnid,\n            );\n            if (index == -1) {\n                const nmessage = new MessagesClass(\n                    this.adapter,\n                    'zamg-msg',\n                    this,\n                    result.properties.warnings[a].properties,\n                    this.providerController,\n                );\n                await nmessage.updateFormated();\n                if (nmessage && nmessage.filter(this.filter)) this.messages.push(nmessage);\n            } else {\n                this.messages[index].updateData(result.properties.warnings[a].properties);\n            }\n        }\n        this.library.garbageColleting(`${this.name}.warning`);\n        await this.finishUpdateData();\n    }\n}\n\nexport class UWZProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: StringProviderOptionsType) {\n        super(adapter, { ...options, service: 'uwzService' }, `uwz`);\n        this.warncellId = options.warncellId.toUpperCase();\n        this.setUrl('', [this.warncellId, options.language]);\n    }\n    async updateData(): Promise<void> {\n        const result = (await this.getDataFromProvider()) as providerDef.dataImportUWZType;\n        if (!result || !result.results || result.results == null) {\n            this.log.warn('Invalid result from uwz server!');\n            return;\n        }\n        result.results.sort((a, b) => {\n            if (a && b && a.dtgStart && b.dtgStart) return a.dtgStart - b.dtgStart;\n            return 0;\n        });\n        this.messages.forEach((a) => (a.notDeleted = false));\n        for (let a = 0; a < this.adapter.numOfRawWarnings && a < result.results.length; a++) {\n            if (result.results[a] == null) continue;\n            if (this.filter.hours && result.results[a].dtgStart > Date.now() + this.filter.hours * 3600) continue;\n            await super.updateData(result.results[a], a);\n\n            const index = this.messages.findIndex((m) => m.rawWarning.payload.id == result.results[a].payload.id);\n            if (index == -1) {\n                const nmessage = new MessagesClass(\n                    this.adapter,\n                    'uwz-msg',\n                    this,\n                    result.results[a],\n                    this.providerController,\n                );\n                await nmessage.updateFormated();\n                if (nmessage && nmessage.filter(this.filter)) this.messages.push(nmessage);\n            } else {\n                this.messages[index].updateData(result.results[a]);\n            }\n        }\n\n        this.log.debug(`Got ${result.results.length} warnings from server`);\n\n        this.library.garbageColleting(`${this.name}.warning`);\n        await this.finishUpdateData();\n    }\n}\nexport class NINAProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: CoordinateProviderOptionsType) {\n        super(adapter, { ...options, service: 'ninaService' }, `nina`);\n    }\n}\nexport class METROProvider extends BaseProvider {\n    constructor(adapter: WeatherWarnings, options: CoordinateProviderOptionsType) {\n        super(adapter, { ...options, service: 'metroService' }, `nina`);\n    }\n}\n\nexport class ProviderController extends BaseClass {\n    providers: providerDef.ProviderClassType[] = [];\n    refreshTimeRef: any = null;\n    alertTimeoutRef: any = null;\n    connection = true;\n    name = 'provider';\n    refreshTime: number = 300000;\n    library: Library;\n    notificationServices: NotificationClass.NotificationClass[] = [];\n\n    pushOn = false;\n\n    constructor(adapter: WeatherWarnings) {\n        super(adapter, 'provider');\n        this.library = this.adapter.library;\n\n        this.doEndOfUpdater.bind(this);\n    }\n    async init(): Promise<void> {\n        this.pushOn = !this.adapter.config.notPushAtStart; // ups wrong variable name PushAtStart\n        this.refreshTime = this.adapter.config.refreshTime * 60000;\n    }\n    /**\n     * Create a notificationService\n     * @param optionList specialcase: adapter == '' then it is createn anyway\n     * @returns\n     */\n    async createNotificationService(optionList: NotificationType.OptionsType): Promise<void> {\n        for (const a in optionList) {\n            const options = optionList[a as keyof NotificationType.OptionsType];\n            if (options === undefined) return;\n            const objs =\n                options.adapter != ''\n                    ? await this.adapter.getObjectViewAsync('system', 'instance', {\n                          startkey: `system.adapter.${options.adapter}`,\n                          endkey: `system.adapter.${options.adapter}`,\n                      })\n                    : null;\n            if (!options.useadapter || (objs && objs.rows && objs.rows.length > 0)) {\n                const noti = new NotificationClass.NotificationClass(this.adapter, options);\n                this.notificationServices.push(noti);\n                await noti.init();\n            } else {\n                this.log.error(`Configuration: ${options.name} is active, but dont find ${options.adapter} adapter!`);\n                throw new Error(`Configuration: ${options.name} is active, but dont find ${options.adapter} adapter!`);\n            }\n        }\n    }\n\n    createProviderIfNotExist(options: ProviderOptionsType): providerDef.ProviderClassType {\n        const index = this.providers.findIndex(\n            (p) =>\n                p &&\n                ((typeof p.warncellId == 'string' && p.warncellIdString == options.warncellId) ||\n                    (typeof options.warncellId == 'object' && options.warncellId.join(DIV) == p.warncellIdString)) &&\n                p.getService() == options.service,\n        );\n        if (index == -1) {\n            let p: providerDef.ProviderClassType;\n            switch (options.service) {\n                case 'dwdService':\n                    if (Array.isArray(options.warncellId)) {\n                        throw new Error('Error 122 warncellId is a Array');\n                    }\n                    p = new DWDProvider(this.adapter, {\n                        ...options,\n                        warncellId: options.warncellId,\n                        providerController: this,\n                    });\n                    break;\n                case 'uwzService':\n                    if (Array.isArray(options.warncellId)) {\n                        throw new Error('Error 123 warncellId is a Array');\n                    }\n                    p = new UWZProvider(this.adapter, {\n                        ...options,\n                        warncellId: options.warncellId,\n                        providerController: this,\n                    });\n                    break;\n                case 'zamgService':\n                    if (!Array.isArray(options.warncellId)) {\n                        throw new Error('Error 124 warncellId is not an Array');\n                    }\n                    p = new ZAMGProvider(this.adapter, {\n                        ...options,\n                        warncellId: options.warncellId,\n                        providerController: this,\n                    });\n                    break;\n                case 'ninaService':\n                    if (!Array.isArray(options.warncellId)) {\n                        throw new Error('Error 125 warncellId is not an Array');\n                    }\n                    p = new NINAProvider(this.adapter, {\n                        ...options,\n                        warncellId: options.warncellId,\n                        providerController: this,\n                        language: this.adapter.config.dwdLanguage,\n                    });\n                    break;\n                default:\n                    throw new Error('Error 126 service is not defined');\n                //todo add metroServicce\n            }\n            if (p) this.providers.push(p);\n            return p;\n        } else {\n            this.log.error('Attempt to create an existing provider.');\n            return this.providers[index];\n        }\n    }\n\n    delete(): void {\n        super.delete();\n        for (const p of this.providers) {\n            if (p) p.delete();\n        }\n        this.providers = [];\n        if (this.refreshTimeRef) this.adapter.clearTimeout(this.refreshTimeRef);\n        if (this.alertTimeoutRef) this.adapter.clearTimeout(this.alertTimeoutRef);\n    }\n\n    updateEndless(that: ProviderController): void {\n        //that.adapter.config.useTestWarnings = !that.adapter.config.useTestWarnings;\n        that.connection = false;\n        if (that.refreshTimeRef) that.adapter.clearTimeout(that.refreshTimeRef);\n        if (that.providers.length == 0) {\n            that.setConnected(false);\n            return;\n        }\n        updater(that);\n        async function updater(self: any, index: number = 0): Promise<void> {\n            const that = self; //as ProviderController;\n            if (that.unload) return;\n            if (index < that.providers.length) {\n                if (that.providers[index]) await that.providers[index].updateData();\n                index++;\n                that.refreshTimeRef = that.adapter.setTimeout(updater, 500, that, index);\n            } else {\n                await that.doEndOfUpdater();\n                that.refreshTimeRef = that.adapter.setTimeout(that.updateEndless, that.refreshTime || 600000, that);\n            }\n        }\n    }\n    updateAlertEndless(that: any): void {\n        if (that.unload) return;\n\n        that.checkAlerts();\n        /** update every minute after 1.333 seconds. Avoid the full minute, full second and half second :) */\n        const timeout = 61333 - (Date.now() % 60000);\n        that.alertTimeoutRef = that.adapter.setTimeout(that.updateAlertEndless, timeout, that);\n    }\n\n    checkAlerts(): void {\n        for (const p in this.providers) {\n            this.providers[p].getAlertsAndWrite();\n        }\n    }\n\n    async doEndOfUpdater(): Promise<void> {\n        this.setConnected();\n        await this.updateMesssages();\n        let activMessages = 0;\n        for (const a in this.providers) {\n            let am = 0;\n            for (const b in this.providers[a].messages) {\n                if (this.providers[a].messages[b].notDeleted) {\n                    am++;\n                }\n            }\n            this.adapter.library.writedp(\n                `${this.providers[a].name}.activeWarnings`,\n                am,\n                definitionen.genericStateObjects.activeWarnings,\n            );\n            activMessages += am;\n        }\n\n        if (this.pushOn) {\n            for (const push of this.notificationServices) {\n                await push.sendMessage(this.providers, ['new', 'remove', 'all']);\n            }\n        }\n        this.pushOn = true;\n        await this.adapter.library.writedp(\n            `${this.name}.activeWarnings`,\n            activMessages,\n            definitionen.genericStateObjects.activeWarnings,\n        );\n        this.providers.forEach((a) => a.clearMessages());\n\n        this.log.debug(`We have ${activMessages} active messages.`);\n    }\n    providersExist(): boolean {\n        return this.providers.length > 0;\n    }\n    async setConnected(status: boolean = this.connection): Promise<void> {\n        const objDef = await this.adapter.library.getObjectDefFromJson(\n            `info.connection`,\n            definitionen.genericStateObjects,\n        );\n        this.adapter.library.writedp(`info.connection`, !!status, objDef);\n    }\n    setAllowedDirs(allowedDirs: any): void {\n        const dirs = [];\n        for (const a in allowedDirs) {\n            if (!allowedDirs[a].dpWarning)\n                dirs.push(`^provider\\\\.${a.replace(`Service`, ``)}\\\\.[a-zA-Z0-9-_]+\\\\.warning`);\n            if (!allowedDirs[a].dpMessage)\n                dirs.push(`^provider\\\\.${a.replace(`Service`, ``)}\\\\.[a-zA-Z0-9-_]+\\\\.alerts`);\n            /*if (!allowedDirs[a].dpFormated)\n                dirs.push(`^provider\\\\.${a.replace(`Service`, ``)}\\\\.[a-zA-Z0-9-_]+\\\\.messages`);*/\n            if (!allowedDirs[a].dpAlerts)\n                dirs.push(`^provider\\\\.${a.replace(`Service`, ``)}\\\\.[a-zA-Z0-9-_]+\\\\.formatedKeys`);\n\n            this.library.setForbiddenDirs(dirs);\n        }\n    }\n    async updateMesssages(): Promise<void> {\n        for (const a in this.providers) {\n            for (const b in this.providers[a].messages) {\n                await this.providers[a].messages[b].updateFormatedData(true);\n                await this.providers[a].messages[b].writeFormatedKeys(Number(b));\n            }\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": ["axios", "that"]
}
